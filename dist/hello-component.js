!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){var n,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":r(window))&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=i[0],s=i[1],c=i[2],u=i[3],l={id:e+":"+o,css:s,media:c,sourceMap:u};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}},function(e,t,n){"use strict";n.r(t);var r={props:{facebook:{type:Boolean,default:!0},twitter:{type:Boolean,default:!0},gplus:{type:Boolean,default:!0}},methods:{share:function(e){window.alert("Share on "+e.target.innerHTML)}}},o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"share-buttons"}},[n("h1",[e._v(" Am a Vue Component")]),e._v(" "),e.facebook?n("a",{attrs:{href:"#"},on:{click:function(t){return t.preventDefault(),e.share(t)}}},[e._v("Facebook")]):e._e(),e._v(" "),e.twitter?n("a",{attrs:{href:"#"},on:{click:function(t){return t.preventDefault(),e.share(t)}}},[e._v("Twitter")]):e._e(),e._v(" "),e.gplus?n("a",{attrs:{href:"#"},on:{click:function(t){return t.preventDefault(),e.share(t)}}},[e._v("Google+")]):e._e()])};o._withStripped=!0;var i=!1;var a=function(e,t,n,r,o,i,a,s){var c=typeof(e=e||{}).default;"object"!==c&&"function"!==c||(e=e.default);var u,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId=i),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},l._ssrRegister=u):o&&(u=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(l.functional){l._injectStyles=u;var f=l.render;l.render=function(e,t){return u.call(t),f(e,t)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:l}}(r,o,[],!1,function(e){i||n(11)},"data-v-5de655f2",null);a.options.__file="src\\components\\Hello.vue";var s=a.exports,c=n(7),u=n(3);c.use(u),c.customElement("my-hello-comp",s)},function(e,t,n){var r,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};
/**
  * vue-custom-element v3.2.1
  * (c) 2018 Karol FabjaÅ„czuk
  * @license MIT
  */
!function(a,s){"object"===i(t)&&void 0!==e?e.exports=s():void 0===(o="function"==typeof(r=s)?r.call(t,n,t,e):r)||(e.exports=o)}(0,function(){"use strict";function e(e,t){return e.__proto__=t,e}Object.setPrototypeOf=Object.setPrototypeOf||e;e.bind(Object);var t="undefined"!=typeof Symbol&&"undefined"!=typeof Reflect,n=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":i(t))&&"function"!=typeof t?e:t}function o(){return Reflect.construct(HTMLElement,[],this.__proto__.constructor)}function a(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("undefined"!=typeof customElements){if(t){var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),o=e?HTMLElement.call(e):n;return u.call(o),r(n,o)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o),n(t,null,[{key:"observedAttributes",get:function(){return a.observedAttributes||[]}}]),t}();return s.prototype.connectedCallback=l,s.prototype.disconnectedCallback=f,s.prototype.attributeChangedCallback=d,customElements.define(e,s),s}var c=function(e){var t=e?HTMLElement.call(e):this;return u.call(t),t};return c.observedAttributes=a.observedAttributes||[],(c.prototype=Object.create(HTMLElement.prototype,{constructor:{configurable:!0,writable:!0,value:c}})).connectedCallback=l,c.prototype.disconnectedCallback=f,c.prototype.attributeChangedCallback=d,customElements.define(e,c),c}function u(){!0===a.shadow&&HTMLElement.prototype.attachShadow&&this.attachShadow({mode:"open"}),"function"==typeof a.constructorCallback&&a.constructorCallback.call(this)}function l(){"function"==typeof a.connectedCallback&&a.connectedCallback.call(this)}function f(){"function"==typeof a.disconnectedCallback&&a.disconnectedCallback.call(this)}function d(e,t,n){"function"==typeof a.attributeChangedCallback&&a.attributeChangedCallback.call(this,e,t,n)}}Object.setPrototypeOf(o.prototype,HTMLElement.prototype),Object.setPrototypeOf(o,HTMLElement);var s=/-(\w)/g,c=function(e){return e.replace(s,function(e,t){return t?t.toUpperCase():""})},u=/([^-])([A-Z])/g,l=function(e){return e.replace(u,"$1-$2").replace(u,"$1-$2").toLowerCase()};function f(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}var d="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":i(e)};function p(e,t){var n=e,r=["true","false"].indexOf(e)>-1,o=parseFloat(n,10),i=!isNaN(o)&&isFinite(n)&&"string"==typeof n&&!n.match(/^0+[^.]\d*$/g);return t&&t!==Boolean?n=t(e):r||t===Boolean?n="true"===n:i&&(n=o),n}function v(e,t){if(e&&e.length)e.forEach(function(e){var n=c(e);-1===t.camelCase.indexOf(n)&&t.camelCase.push(n)});else if(e&&"object"===(void 0===e?"undefined":d(e)))for(var n in e){var r=c(n);-1===t.camelCase.indexOf(r)&&t.camelCase.push(r),e[r]&&e[r].type&&(t.types[n]=[].concat(e[r].type)[0])}}function h(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={camelCase:[],hyphenate:[],types:{}};(e.mixins&&e.mixins.forEach(function(e){v(e.props,t)}),e.extends&&e.extends.props)&&v(e.extends.props,t);return v(e.props,t),t.camelCase.forEach(function(e){t.hyphenate.push(l(e))}),t}function m(e){var t={};return f(e.attributes).forEach(function(e){t["vue-slot"===e.nodeName?"slot":e.nodeName]=e.nodeValue}),t}function y(e,t,n){var r=f(function(e){if(e.childNodes.length)return e.childNodes;if(e.content&&e.content.childNodes&&e.content.childNodes.length)return e.content.childNodes;var t=document.createElement("div");return t.innerHTML=e.innerHTML,t.childNodes}(t)).map(function(t){return"#text"===t.nodeName?t.nodeValue:e(t.tagName,{attrs:m(t),domProps:{innerHTML:t.innerHTML}})});return n.slot=t.id,e("template",n,r)}function g(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i=function(e,t){var n={bubbles:!1,cancelable:!1,detail:t},r=void 0;return"function"==typeof window.CustomEvent?r=new CustomEvent(e,n):(r=document.createEvent("CustomEvent")).initCustomEvent(e,n.bubbles,n.cancelable,n.detail),r}(t,[].concat(r));e.dispatchEvent(i)}function b(e,t,n,r,o){if(!e.__vue_custom_element__){var i=t.util.extend({},n),a=function(e,t,n){var r=t.propsData||{};return n.hyphenate.forEach(function(t,o){var i=n.camelCase[o],a=e.attributes[t]||e[i],s=null;n.types[i]&&(s=n.types[i]),r[i]=a instanceof Attr?p(a.value,s):a}),r}(e,i,r),s=t.version&&parseInt(t.version.split(".")[0],10)||0;if(i.beforeCreate=[].concat(i.beforeCreate||[],function(){this.$emit=function(){for(var t,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];g.apply(void 0,[e].concat(r)),this.__proto__&&(t=this.__proto__.$emit).call.apply(t,[this].concat(r))}}),i._compiled){var c={};i._Ctor&&(c=Object.values(i._Ctor)[0].options),c.beforeCreate=i.beforeCreate}var u=void 0;if(s>=2){var l=e.cloneNode(!0).childNodes;u={propsData:a,props:r.camelCase,computed:{reactiveProps:function(){var e=this,t={};return r.camelCase.forEach(function(n){t[n]=e[n]}),t}},render:function(e){var t={props:this.reactiveProps};return e(i,t,function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1],n=[];return f(e).forEach(function(e){if("#text"===e.nodeName)e.nodeValue.trim()&&n.push(t("span",e.nodeValue));else if("#comment"!==e.nodeName){var r=m(e),o={attrs:r,domProps:{innerHTML:""===e.innerHTML?e.innerText:e.innerHTML}};r.slot&&(o.slot=r.slot,r.slot=void 0);var i="TEMPLATE"===e.tagName?y(t,e,o):t(e.tagName,o);n.push(i)}}),n}(l,e))}}}else if(1===s)(u=i).propsData=a;else{u=i;var v={};Object.keys(a).forEach(function(e){v[e]={default:a[e]}}),u.props=v}var h=s>=2?"<div></div>":("<div>"+e.innerHTML+"</div>").replace(/vue-slot=/g,"slot=");if(o.shadow&&e.shadowRoot?(e.shadowRoot.innerHTML=h,u.el=e.shadowRoot.children[0]):(e.innerHTML=h,u.el=e.children[0]),function(e,t){t.camelCase.forEach(function(n,r){Object.defineProperty(e,n,{get:function(){return this.__vue_custom_element__[n]},set:function(e){if("object"!==(void 0===e?"undefined":d(e))&&"function"!=typeof e||!this.__vue_custom_element__){var n=t.types[t.camelCase[r]];this.setAttribute(t.hyphenate[r],p(e,n))}else{var o=t.camelCase[r];this.__vue_custom_element__[o]=e}}})})}(e,r),"function"==typeof o.beforeCreateVueInstance&&(u=o.beforeCreateVueInstance(u)||u),e.__vue_custom_element__=new t(u),e.__vue_custom_element_props__=r,e.getVueInstance=function(){return e.__vue_custom_element__.$children[0]},o.shadow&&o.shadowCss&&e.shadowRoot){var b=document.createElement("style");b.type="text/css",b.appendChild(document.createTextNode(o.shadowCss)),e.shadowRoot.appendChild(b)}e.removeAttribute("vce-cloak"),e.setAttribute("vce-ready",""),g(e,"vce-ready")}}function _(e){e.customElement=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o="function"==typeof n,i=o&&{props:r.props||[]},s=h(o?i:n);return a(t,{constructorCallback:function(){"function"==typeof r.constructorCallback&&r.constructorCallback.call(this)},connectedCallback:function(){var i=this,a=o&&n(),c=a&&a.then&&"function"==typeof a.then;if("function"==typeof r.connectedCallback&&r.connectedCallback.call(this),o&&!c)throw new Error("Async component "+t+" do not returns Promise");this.__detached__||(c?a.then(function(t){var n=h(t);b(i,e,t,n,r)}):b(this,e,n,s,r)),this.__detached__=!1},disconnectedCallback:function(){var e=this;this.__detached__=!0,"function"==typeof r.disconnectedCallback&&r.disconnectedCallback.call(this),setTimeout(function(){e.__detached__&&e.__vue_custom_element__&&(e.__vue_custom_element__.$destroy(!0),delete e.__vue_custom_element__,delete e.__vue_custom_element_props__)},r.destroyTimeout||3e3)},attributeChangedCallback:function(e,t,n){if(this.__vue_custom_element__&&void 0!==n){var o=c(e);"function"==typeof r.attributeChangedCallback&&r.attributeChangedCallback.call(this,e,t,n);var i=this.__vue_custom_element_props__.types[o];this.__vue_custom_element__[o]=p(n,i)}},observedAttributes:s.hyphenate,shadow:!!r.shadow&&!!HTMLElement.prototype.attachShadow})}}return"undefined"!=typeof window&&window.Vue&&(window.Vue.use(_),_.installed&&(_.installed=!1)),_})},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],l=!1,f=-1;function d(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&p())}function p(){if(!l){var e=s(d);l=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function v(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new v(e,t)),1!==u.length||l||s(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o=1,i={},a=!1,s=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){l(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&l(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),r=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){l(e.data)},r=function(t){e.port2.postMessage(t)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var e=s.documentElement;r=function(t){var n=s.createElement("script");n.onreadystatechange=function(){l(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():r=function(e){setTimeout(l,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var a={callback:e,args:t};return i[o]=a,r(o),o++},c.clearImmediate=u}function u(e){delete i[e]}function l(e){if(a)setTimeout(l,0,e);else{var t=i[e];if(t){a=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{u(e),a=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(4))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(5),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(r,o){var i,a,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
!function(r,o){"object"===s(t)&&void 0!==e?e.exports=o():void 0===(a="function"==typeof(i=o)?i.call(t,n,t,e):i)||(e.exports=a)}(0,function(){"use strict";var e=Object.freeze({});function t(e){return void 0===e||null===e}function n(e){return void 0!==e&&null!==e}function i(e){return!0===e}function a(e){return"string"==typeof e||"number"==typeof e||"symbol"===(void 0===e?"undefined":s(e))||"boolean"==typeof e}function c(e){return null!==e&&"object"===(void 0===e?"undefined":s(e))}var u=Object.prototype.toString;function l(e){return u.call(e).slice(8,-1)}function f(e){return"[object Object]"===u.call(e)}function d(e){return"[object RegExp]"===u.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function v(e){return null==e?"":"object"===(void 0===e?"undefined":s(e))?JSON.stringify(e,null,2):String(e)}function h(e){var t=parseFloat(e);return isNaN(t)?e:t}function m(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var y=m("slot,component",!0),g=m("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var _=Object.prototype.hasOwnProperty;function w(e,t){return _.call(e,t)}function C(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var x=/-(\w)/g,$=C(function(e){return e.replace(x,function(e,t){return t?t.toUpperCase():""})}),A=C(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),k=/\B([A-Z])/g,O=C(function(e){return e.replace(k,"-$1").toLowerCase()});var T=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function S(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function E(e,t){for(var n in t)e[n]=t[n];return e}function j(e){for(var t={},n=0;n<e.length;n++)e[n]&&E(t,e[n]);return t}function M(e,t,n){}var N=function(e,t,n){return!1},I=function(e){return e};function L(e,t){if(e===t)return!0;var n=c(e),r=c(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every(function(e,n){return L(e,t[n])});if(o||i)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every(function(n){return L(e[n],t[n])})}catch(e){return!1}}function P(e,t){for(var n=0;n<e.length;n++)if(L(e[n],t))return n;return-1}function D(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var R="data-server-rendered",F=["component","directive","filter"],H=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:N,isReservedAttr:N,isUnknownElement:N,getTagNamespace:M,parsePlatformTagName:I,mustUseProp:N,_lifecycleHooks:H};function B(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function V(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var z=/[^\w.$]/;var J,q="__proto__"in{},K="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=W&&WXEnvironment.platform.toLowerCase(),Y=K&&window.navigator.userAgent.toLowerCase(),Z=Y&&/msie|trident/.test(Y),X=Y&&Y.indexOf("msie 9.0")>0,Q=Y&&Y.indexOf("edge/")>0,ee=(Y&&Y.indexOf("android"),Y&&/iphone|ipad|ipod|ios/.test(Y)||"ios"===G),te=Y&&/chrome\/\d+/.test(Y)&&!Q,ne={}.watch,re=!1;if(K)try{var oe={};Object.defineProperty(oe,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,oe)}catch(e){}var ie=function(){return void 0===J&&(J=!K&&!W&&void 0!==r&&"server"===r.process.env.VUE_ENV),J},ae=K&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var ce,ue="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);ce="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=M,fe=M,de=M,pe=M,ve="undefined"!=typeof console,he=/(?:^|[-_])(\w)/g;le=function(e,t){var n=t?de(t):"";U.warnHandler?U.warnHandler.call(null,e,t,n):ve&&!U.silent&&console.error("[Vue warn]: "+e+n)},fe=function(e,t){ve&&!U.silent&&console.warn("[Vue tip]: "+e+(t?de(t):""))},pe=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e||{},r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+function(e){return e.replace(he,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")}(r)+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")};de=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?pe(e[0])+"... ("+e[1]+" recursive calls)":pe(e))}).join("\n")}return"\n\n(found in "+pe(e)+")"};var me=0,ye=function(){this.id=me++,this.subs=[]};ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){b(this.subs,e)},ye.prototype.depend=function(){ye.target&&ye.target.addDep(this)},ye.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},ye.target=null;var ge=[];function be(e){ye.target&&ge.push(ye.target),ye.target=e}function _e(){ye.target=ge.pop()}var we=function(e,t,n,r,o,i,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ce={child:{configurable:!0}};Ce.child.get=function(){return this.componentInstance},Object.defineProperties(we.prototype,Ce);var xe=function(e){void 0===e&&(e="");var t=new we;return t.text=e,t.isComment=!0,t};function $e(e){return new we(void 0,void 0,void 0,String(e))}function Ae(e){var t=new we(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.isCloned=!0,t}var ke=Array.prototype,Oe=Object.create(ke);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=ke[e];V(Oe,e,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var Te=Object.getOwnPropertyNames(Oe),Se=!0;function Ee(e){Se=e}var je=function(e){(this.value=e,this.dep=new ye,this.vmCount=0,V(e,"__ob__",this),Array.isArray(e))?((q?Me:Ne)(e,Oe,Te),this.observeArray(e)):this.walk(e)};function Me(e,t,n){e.__proto__=t}function Ne(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];V(e,i,t[i])}}function Ie(e,t){var n;if(c(e)&&!(e instanceof we))return w(e,"__ob__")&&e.__ob__ instanceof je?n=e.__ob__:Se&&!ie()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new je(e)),t&&n&&n.vmCount++,n}function Le(e,t,n,r,o){var i=new ye,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get;s||2!==arguments.length||(n=e[t]);var c=a&&a.set,u=!o&&Ie(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ye.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,r=0,o=t.length;r<o;r++)(n=t[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var a=s?s.call(e):n;t===a||t!=t&&a!=a||(r&&r(),c?c.call(e,t):n=t,u=!o&&Ie(t),i.notify())}})}}function Pe(e,n,r){if((t(e)||a(e))&&le("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(n))return e.length=Math.max(e.length,n),e.splice(n,1,r),r;if(n in e&&!(n in Object.prototype))return e[n]=r,r;var o=e.__ob__;return e._isVue||o&&o.vmCount?(le("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),r):o?(Le(o.value,n,r),o.dep.notify(),r):(e[n]=r,r)}function De(e,n){if((t(e)||a(e))&&le("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(n))e.splice(n,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount?le("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,n)&&(delete e[n],r&&r.dep.notify())}}je.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Le(e,t[n])},je.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ie(e[t])};var Re=U.optionMergeStrategies;function Fe(e,t){if(!t)return e;for(var n,r,o,i=Object.keys(t),a=0;a<i.length;a++)r=e[n=i[a]],o=t[n],w(e,n)?f(r)&&f(o)&&Fe(r,o):Pe(e,n,o);return e}function He(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Fe(r,o):o}:t?e?function(){return Fe("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Ue(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function Be(e,t,n,r){var o=Object.create(e||null);return t?(Je(r,t,n),E(o,t)):o}Re.el=Re.propsData=function(e,t,n,r){return n||le('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ve(e,t)},Re.data=function(e,t,n){return n?He(e,t,n):t&&"function"!=typeof t?(le('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):He(e,t)},H.forEach(function(e){Re[e]=Ue}),F.forEach(function(e){Re[e+"s"]=Be}),Re.watch=function(e,t,n,r){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(Je(r,t,n),!e)return t;var o={};for(var i in E(o,e),t){var a=o[i],s=t[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Re.props=Re.methods=Re.inject=Re.computed=function(e,t,n,r){if(t&&Je(r,t,n),!e)return t;var o=Object.create(null);return E(o,e),t&&E(o,t),o},Re.provide=He;var Ve=function(e,t){return void 0===t?e:t};function ze(e){/^[a-zA-Z][\w-]*$/.test(e)||le('Invalid component name: "'+e+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.'),(y(e)||U.isReservedTag(e))&&le("Do not use built-in or reserved HTML elements as component id: "+e)}function Je(e,t,n){f(t)||le('Invalid value for option "'+e+'": expected an Object, but got '+l(t)+".",n)}function qe(e,t,n){!function(e){for(var t in e.components)ze(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?i[$(o)]={type:null}:le("props must be strings when using array syntax.");else if(f(n))for(var a in n)o=n[a],i[$(a)]=f(o)?o:{type:o};else le('Invalid value for option "props": expected an Array or an Object, but got '+l(n)+".",t);e.props=i}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?E({from:i},a):{from:a}}else le('Invalid value for option "inject": expected an Array or an Object, but got '+l(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t);var r=t.extends;if(r&&(e=qe(e,r,n)),t.mixins)for(var o=0,i=t.mixins.length;o<i;o++)e=qe(e,t.mixins[o],n);var a,s={};for(a in e)c(a);for(a in t)w(e,a)||c(a);function c(r){var o=Re[r]||Ve;s[r]=o(e[r],t[r],n,r)}return s}function Ke(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var i=$(n);if(w(o,i))return o[i];var a=A(i);if(w(o,a))return o[a];var s=o[n]||o[i]||o[a];return r&&!s&&le("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function We(e,t,n,r){var o=t[e],i=!w(n,e),a=n[e],s=Qe(Boolean,o.type);if(s>-1)if(i&&!w(o,"default"))a=!1;else if(""===a||a===O(e)){var u=Qe(String,o.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!w(t,"default"))return;var r=t.default;c(r)&&le('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e);if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Ze(t.type)?r.call(e):r}(r,o,e);var f=Se;Ee(!0),Ie(a),Ee(f)}return function(e,t,n,r,o){if(e.required&&o)return void le('Missing required prop: "'+t+'"',r);if(null==n&&!e.required)return;var i=e.type,a=!i||!0===i,s=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!a;c++){var u=Ye(n,i[c]);s.push(u.expectedType||""),a=u.valid}}if(!a)return void le('Invalid prop: type check failed for prop "'+t+'". Expected '+s.map(A).join(", ")+", got "+l(n)+".",r);var f=e.validator;f&&(f(n)||le('Invalid prop: custom validator check failed for prop "'+t+'".',r))}(o,e,a,r,i),a}var Ge=/^(String|Number|Boolean|Function|Symbol)$/;function Ye(e,t){var n,r=Ze(t);if(Ge.test(r)){var o=void 0===e?"undefined":s(e);(n=o===r.toLowerCase())||"object"!==o||(n=e instanceof t)}else n="Object"===r?f(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function Ze(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Xe(e,t){return Ze(e)===Ze(t)}function Qe(e,t){if(!Array.isArray(t))return Xe(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(Xe(t[n],e))return n;return-1}function et(e,t,n){if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,e,t,n))return}catch(e){tt(e,r,"errorCaptured hook")}}tt(e,t,n)}function tt(e,t,n){if(U.errorHandler)try{return U.errorHandler.call(null,e,t,n)}catch(e){nt(e,null,"config.errorHandler")}nt(e,t,n)}function nt(e,t,n){if(le("Error in "+n+': "'+e.toString()+'"',t),!K&&!W||"undefined"==typeof console)throw e;console.error(e)}var rt,ot,it=[],at=!1;function st(){at=!1;var e=it.slice(0);it.length=0;for(var t=0;t<e.length;t++)e[t]()}var ct,ut,lt=!1;if(void 0!==o&&se(o))ot=function(){o(st)};else if("undefined"==typeof MessageChannel||!se(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())ot=function(){setTimeout(st,0)};else{var ft=new MessageChannel,dt=ft.port2;ft.port1.onmessage=st,ot=function(){dt.postMessage(1)}}if("undefined"!=typeof Promise&&se(Promise)){var pt=Promise.resolve();rt=function(){pt.then(st),ee&&setTimeout(M)}}else rt=ot;function vt(e,t){var n;if(it.push(function(){if(e)try{e.call(t)}catch(e){et(e,t,"nextTick")}else n&&n(t)}),at||(at=!0,lt?ot():rt()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var ht,mt=K&&window.performance;mt&&mt.mark&&mt.measure&&mt.clearMarks&&mt.clearMeasures&&(ct=function(e){return mt.mark(e)},ut=function(e,t,n){mt.measure(e,t,n),mt.clearMarks(t),mt.clearMarks(n),mt.clearMeasures(e)});var yt=m("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),gt=function(e,t){le('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},bt="undefined"!=typeof Proxy&&se(Proxy);if(bt){var _t=m("stop,prevent,self,ctrl,shift,alt,meta,exact");U.keyCodes=new Proxy(U.keyCodes,{set:function(e,t,n){return _t(t)?(le("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var wt={has:function(e,t){var n=t in e,r=yt(t)||"_"===t.charAt(0);return n||r||gt(e,t),n||!r}},Ct={get:function(e,t){return"string"!=typeof t||t in e||gt(e,t),e[t]}};ht=function(e){if(bt){var t=e.$options,n=t.render&&t.render._withStripped?Ct:wt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var xt=new ce;function $t(e){!function e(t,n){var r,o;var i=Array.isArray(t);if(!i&&!c(t)||Object.isFrozen(t)||t instanceof we)return;if(t.__ob__){var a=t.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=t.length;r--;)e(t[r],n);else for(o=Object.keys(t),r=o.length;r--;)e(t[o[r]],n)}(e,xt),xt.clear()}var At,kt=C(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}});function Ot(e){function t(){var e=arguments,n=t.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),o=0;o<r.length;o++)r[o].apply(null,e)}return t.fns=e,t}function Tt(e,n,r,o,i){var a,s,c,u;for(a in e)s=e[a],c=n[a],u=kt(a),t(s)?le('Invalid handler for event "'+u.name+'": got '+String(s),i):t(c)?(t(s.fns)&&(s=e[a]=Ot(s)),r(u.name,s,u.once,u.capture,u.passive,u.params)):s!==c&&(c.fns=s,e[a]=c);for(a in n)t(e[a])&&o((u=kt(a)).name,n[a],u.capture)}function St(e,r,o){var a;e instanceof we&&(e=e.data.hook||(e.data.hook={}));var s=e[r];function c(){o.apply(this,arguments),b(a.fns,c)}t(s)?a=Ot([c]):n(s.fns)&&i(s.merged)?(a=s).fns.push(c):a=Ot([s,c]),a.merged=!0,e[r]=a}function Et(e,t,r,o,i){if(n(t)){if(w(t,r))return e[r]=t[r],i||delete t[r],!0;if(w(t,o))return e[r]=t[o],i||delete t[o],!0}return!1}function jt(e){return a(e)?[$e(e)]:Array.isArray(e)?function e(r,o){var s=[];var c,u,l,f;for(c=0;c<r.length;c++)t(u=r[c])||"boolean"==typeof u||(l=s.length-1,f=s[l],Array.isArray(u)?u.length>0&&(Mt((u=e(u,(o||"")+"_"+c))[0])&&Mt(f)&&(s[l]=$e(f.text+u[0].text),u.shift()),s.push.apply(s,u)):a(u)?Mt(f)?s[l]=$e(f.text+u):""!==u&&s.push($e(u)):Mt(u)&&Mt(f)?s[l]=$e(f.text+u.text):(i(r._isVList)&&n(u.tag)&&t(u.key)&&n(o)&&(u.key="__vlist"+o+"_"+c+"__"),s.push(u)));return s}(e):void 0}function Mt(e){return n(e)&&n(e.text)&&function(e){return!1===e}(e.isComment)}function Nt(e,t){return(e.__esModule||ue&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function It(e){return e.isComment&&e.asyncFactory}function Lt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var r=e[t];if(n(r)&&(n(r.componentOptions)||It(r)))return r}}function Pt(e,t,n){n?At.$once(e,t):At.$on(e,t)}function Dt(e,t){At.$off(e,t)}function Rt(e,t,n){At=e,Tt(t,n||{},Pt,Dt,e),At=void 0}function Ft(e,t){var n={};if(!e)return n;for(var r=0,o=e.length;r<o;r++){var i=e[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==t&&i.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Ht)&&delete n[u];return n}function Ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Ut(e,t){t=t||{};for(var n=0;n<e.length;n++)Array.isArray(e[n])?Ut(e[n],t):t[e[n].key]=e[n].fn;return t}var Bt=null,Vt=!1;function zt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Jt(e,t){if(t){if(e._directInactive=!1,zt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Jt(e.$children[n]);qt(e,"activated")}}function qt(e,t){be();var n=e.$options[t];if(n)for(var r=0,o=n.length;r<o;r++)try{n[r].call(e)}catch(n){et(n,e,t+" hook")}e._hasHookEvent&&e.$emit("hook:"+t),_e()}var Kt=100,Wt=[],Gt=[],Yt={},Zt={},Xt=!1,Qt=!1,en=0;function tn(){var e,t;for(Qt=!0,Wt.sort(function(e,t){return e.id-t.id}),en=0;en<Wt.length;en++)if(t=(e=Wt[en]).id,Yt[t]=null,e.run(),null!=Yt[t]&&(Zt[t]=(Zt[t]||0)+1,Zt[t]>Kt)){le("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Gt.slice(),r=Wt.slice();en=Wt.length=Gt.length=0,Yt={},Zt={},Xt=Qt=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Jt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&qt(r,"updated")}}(r),ae&&U.devtools&&ae.emit("flush")}var nn=0,rn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++nn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ce,this.newDepIds=new ce,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!z.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=function(){},le('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};rn.prototype.get=function(){var e;be(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;et(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&$t(e),_e(),this.cleanupDeps()}return e},rn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},rn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},rn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Yt[t]){if(Yt[t]=!0,Qt){for(var n=Wt.length-1;n>en&&Wt[n].id>e.id;)n--;Wt.splice(n+1,0,e)}else Wt.push(e);Xt||(Xt=!0,vt(tn))}}(this)},rn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){et(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},rn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},rn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},rn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var on={enumerable:!0,configurable:!0,get:M,set:M};function an(e,t,n){on.get=function(){return this[t][n]},on.set=function(e){this[t][n]=e},Object.defineProperty(e,n,on)}function sn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[];e.$parent&&Ee(!1);var i=function(i){o.push(i);var a=We(i,t,n,e),s=O(i);(g(s)||U.isReservedAttr(s))&&le('"'+s+'" is a reserved attribute and cannot be used as component prop.',e),Le(r,i,a,function(){e.$parent&&!Vt&&le("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)}),i in e||an(e,"_props",i)};for(var a in t)i(a);Ee(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)null==t[r]&&le('Method "'+r+'" has an undefined value in the component definition. Did you reference the function correctly?',e),n&&w(n,r)&&le('Method "'+r+'" has already been defined as a prop.',e),r in e&&B(r)&&le('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]=null==t[r]?M:T(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;f(t=e._data="function"==typeof t?function(e,t){be();try{return e.call(t,t)}catch(e){return et(e,t,"data()"),{}}finally{_e()}}(t,e):t||{})||(t={},le("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;for(;i--;){var a=n[i];o&&w(o,a)&&le('Method "'+a+'" has already been defined as a data property.',e),r&&w(r,a)?le('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',e):B(a)||an(e,"_data",a)}Ie(t,!0)}(e):Ie(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ie();for(var o in t){var i=t[o],a="function"==typeof i?i:i.get;null==a&&le('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new rn(e,a||M,M,cn)),o in e?o in e.$data?le('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&le('The computed property "'+o+'" is already defined as a prop.',e):un(e,o,i)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)fn(e,n,r[o]);else fn(e,n,r)}}(e,t.watch)}var cn={lazy:!0};function un(e,t,n){var r=!ie();"function"==typeof n?(on.get=r?ln(t):n,on.set=M):(on.get=n.get?r&&!1!==n.cache?ln(t):n.get:M,on.set=n.set?n.set:M),on.set===M&&(on.set=function(){le('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,on)}function ln(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ye.target&&t.depend(),t.value}}function fn(e,t,n,r){return f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function dn(e,t){if(e){for(var n=Object.create(null),r=ue?Reflect.ownKeys(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}):Object.keys(e),o=0;o<r.length;o++){for(var i=r[o],a=e[i].from,s=t;s;){if(s._provided&&w(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[i]){var c=e[i].default;n[i]="function"==typeof c?c.call(t):c}else le('Injection "'+i+'" not found',t)}return n}}function pn(e,t){var r,o,i,a,s;if(Array.isArray(e)||"string"==typeof e)for(r=new Array(e.length),o=0,i=e.length;o<i;o++)r[o]=t(e[o],o);else if("number"==typeof e)for(r=new Array(e),o=0;o<e;o++)r[o]=t(o+1,o);else if(c(e))for(a=Object.keys(e),r=new Array(a.length),o=0,i=a.length;o<i;o++)s=a[o],r[o]=t(e[s],s,o);return n(r)&&(r._isVList=!0),r}function vn(e,t,n,r){var o,i=this.$scopedSlots[e];if(i)n=n||{},r&&(c(r)||le("slot v-bind without argument expects an Object",this),n=E(E({},r),n)),o=i(n)||t;else{var a=this.$slots[e];a&&(a._rendered&&le('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),a._rendered=!0),o=a||t}var s=n&&n.slot;return s?this.$createElement("template",{slot:s},o):o}function hn(e){return Ke(this.$options,"filters",e,!0)||I}function mn(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function yn(e,t,n,r,o){var i=U.keyCodes[t]||n;return o&&r&&!U.keyCodes[t]?mn(o,r):i?mn(i,e):r?O(r)!==t:void 0}function gn(e,t,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=j(n));var a=function(a){if("class"===a||"style"===a||g(a))i=e;else{var s=e.attrs&&e.attrs.type;i=r||U.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}a in i||(i[a]=n[a],o&&((e.on||(e.on={}))["update:"+a]=function(e){n[a]=e}))};for(var s in n)a(s)}else le("v-bind without argument expects an Object or Array value",this);return e}function bn(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(wn(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r)}function _n(e,t,n){return wn(e,"__once__"+t+(n?"_"+n:""),!0),e}function wn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&Cn(e[r],t+"_"+r,n);else Cn(e,t,n)}function Cn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function xn(e,t){if(t)if(f(t)){var n=e.on=e.on?E({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else le("v-on without argument expects an Object value",this);return e}function $n(e){e._o=_n,e._n=h,e._s=v,e._l=pn,e._t=vn,e._q=L,e._i=P,e._m=bn,e._f=hn,e._k=yn,e._b=gn,e._v=$e,e._e=xe,e._u=Ut,e._g=xn}function An(t,n,r,o,a){var s,c=a.options;w(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var u=i(c._compiled),l=!u;this.data=t,this.props=n,this.children=r,this.parent=o,this.listeners=t.on||e,this.injections=dn(c.inject,o),this.slots=function(){return Ft(r,o)},u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||e),c._scopeId?this._c=function(e,t,n,r){var i=Nn(s,e,t,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return Nn(s,e,t,n,r,l)}}function kn(e,t,n,r){var o=Ae(e);return o.fnContext=n,o.fnOptions=r,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function On(e,t){for(var n in t)e[$(n)]=t[n]}$n(An.prototype);var Tn={init:function(e,t,r,o){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var i=e;Tn.prepatch(i,i)}else{(e.componentInstance=function(e,t,r,o){var i={_isComponent:!0,parent:t,_parentVnode:e,_parentElm:r||null,_refElm:o||null},a=e.data.inlineTemplate;n(a)&&(i.render=a.render,i.staticRenderFns=a.staticRenderFns);return new e.componentOptions.Ctor(i)}(e,Bt,r,o)).$mount(t?e.elm:void 0,t)}},prepatch:function(t,n){var r=n.componentOptions;!function(t,n,r,o,i){Vt=!0;var a=!!(i||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==e);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||e,t.$listeners=r||e,n&&t.$options.props){Ee(!1);for(var s=t._props,c=t.$options._propKeys||[],u=0;u<c.length;u++){var l=c[u],f=t.$options.props;s[l]=We(l,f,n,t)}Ee(!0),t.$options.propsData=n}r=r||e;var d=t.$options._parentListeners;t.$options._parentListeners=r,Rt(t,r,d),a&&(t.$slots=Ft(i,o.context),t.$forceUpdate()),Vt=!1}(n.componentInstance=t.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(n._isMounted=!0,qt(n,"mounted")),e.data.keepAlive&&(t._isMounted?function(e){e._inactive=!1,Gt.push(e)}(n):Jt(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(!(n&&(t._directInactive=!0,zt(t))||t._inactive)){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);qt(t,"deactivated")}}(t,!0):t.$destroy())}},Sn=Object.keys(Tn);function En(r,o,a,s,u){if(!t(r)){var l=a.$options._base;if(c(r)&&(r=l.extend(r)),"function"==typeof r){var f;if(t(r.cid)&&void 0===(r=function(e,r,o){if(i(e.error)&&n(e.errorComp))return e.errorComp;if(n(e.resolved))return e.resolved;if(i(e.loading)&&n(e.loadingComp))return e.loadingComp;if(!n(e.contexts)){var a=e.contexts=[o],s=!0,u=function(){for(var e=0,t=a.length;e<t;e++)a[e].$forceUpdate()},l=D(function(t){e.resolved=Nt(t,r),s||u()}),f=D(function(t){le("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),n(e.errorComp)&&(e.error=!0,u())}),d=e(l,f);return c(d)&&("function"==typeof d.then?t(e.resolved)&&d.then(l,f):n(d.component)&&"function"==typeof d.component.then&&(d.component.then(l,f),n(d.error)&&(e.errorComp=Nt(d.error,r)),n(d.loading)&&(e.loadingComp=Nt(d.loading,r),0===d.delay?e.loading=!0:setTimeout(function(){t(e.resolved)&&t(e.error)&&(e.loading=!0,u())},d.delay||200)),n(d.timeout)&&setTimeout(function(){t(e.resolved)&&f("timeout ("+d.timeout+"ms)")},d.timeout))),s=!1,e.loading?e.loadingComp:e.resolved}e.contexts.push(o)}(f=r,l,a)))return function(e,t,n,r,o){var i=xe();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}(f,o,a,s,u);o=o||{},Ln(r),n(o.model)&&function(e,t){var r=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(t.props||(t.props={}))[r]=t.model.value;var i=t.on||(t.on={});n(i[o])?i[o]=[t.model.callback].concat(i[o]):i[o]=t.model.callback}(r.options,o);var d=function(e,r,o){var i=r.options.props;if(!t(i)){var a={},s=e.attrs,c=e.props;if(n(s)||n(c))for(var u in i){var l=O(u),f=u.toLowerCase();u!==f&&s&&w(s,f)&&fe('Prop "'+f+'" is passed to component '+pe(o||r)+', but the declared prop name is "'+u+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+u+'".'),Et(a,c,u,l,!0)||Et(a,s,u,l,!1)}return a}}(o,r,u);if(i(r.options.functional))return function(t,r,o,i,a){var s=t.options,c={},u=s.props;if(n(u))for(var l in u)c[l]=We(l,u,r||e);else n(o.attrs)&&On(c,o.attrs),n(o.props)&&On(c,o.props);var f=new An(o,c,a,i,t),d=s.render.call(null,f._c,f);if(d instanceof we)return kn(d,o,f.parent,s);if(Array.isArray(d)){for(var p=jt(d)||[],v=new Array(p.length),h=0;h<p.length;h++)v[h]=kn(p[h],o,f.parent,s);return v}}(r,d,o,a,s);var p=o.on;if(o.on=o.nativeOn,i(r.options.abstract)){var v=o.slot;o={},v&&(o.slot=v)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Sn.length;n++){var r=Sn[n];t[r]=Tn[r]}}(o);var h=r.options.name||u;return new we("vue-component-"+r.cid+(h?"-"+h:""),o,void 0,void 0,void 0,a,{Ctor:r,propsData:d,listeners:p,tag:u,children:s},f)}le("Invalid Component definition: "+String(r),a)}}var jn=1,Mn=2;function Nn(e,r,o,s,u,l){return(Array.isArray(o)||a(o))&&(u=s,s=o,o=void 0),i(l)&&(u=Mn),function(e,r,o,s,u){if(n(o)&&n(o.__ob__))return le("Avoid using observed data object as vnode data: "+JSON.stringify(o)+"\nAlways create fresh vnode data objects in each render!",e),xe();n(o)&&n(o.is)&&(r=o.is);if(!r)return xe();n(o)&&n(o.key)&&!a(o.key)&&le("Avoid using non-primitive value as key, use string/number value instead.",e);Array.isArray(s)&&"function"==typeof s[0]&&((o=o||{}).scopedSlots={default:s[0]},s.length=0);u===Mn?s=jt(s):u===jn&&(s=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(s));var l,f;if("string"==typeof r){var d;f=e.$vnode&&e.$vnode.ns||U.getTagNamespace(r),l=U.isReservedTag(r)?new we(U.parsePlatformTagName(r),o,s,void 0,void 0,e):n(d=Ke(e.$options,"components",r))?En(d,o,e,s,r):new we(r,o,s,void 0,void 0,e)}else l=En(r,o,e,s);return Array.isArray(l)?l:n(l)?(n(f)&&function e(r,o,a){r.ns=o;"foreignObject"===r.tag&&(o=void 0,a=!0);if(n(r.children))for(var s=0,c=r.children.length;s<c;s++){var u=r.children[s];n(u.tag)&&(t(u.ns)||i(a)&&"svg"!==u.tag)&&e(u,o,a)}}(l,f),n(o)&&function(e){c(e.style)&&$t(e.style);c(e.class)&&$t(e.class)}(o),l):xe()}(e,r,o,s,u)}var In=0;function Ln(e){var t=e.options;if(e.super){var n=Ln(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.extendOptions,o=e.sealedOptions;for(var i in n)n[i]!==o[i]&&(t||(t={}),t[i]=Pn(n[i],r[i],o[i]));return t}(e);r&&E(e.extendOptions,r),(t=e.options=qe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Pn(e,t,n){if(Array.isArray(e)){var r=[];n=Array.isArray(n)?n:[n],t=Array.isArray(t)?t:[t];for(var o=0;o<e.length;o++)(t.indexOf(e[o])>=0||n.indexOf(e[o])<0)&&r.push(e[o]);return r}return e}function Dn(e){this instanceof Dn||le("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Rn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&ze(i);var a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=qe(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)an(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)un(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,F.forEach(function(e){a[e]=n[e]}),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=E({},a.options),o[r]=a,a}}function Fn(e){return e&&(e.Ctor.options.name||e.tag)}function Hn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function Un(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var a=n[i];if(a){var s=Fn(a.componentOptions);s&&!t(s)&&Bn(n,i,r,o)}}}function Bn(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}!function(t){t.prototype._init=function(t){var n,r,o=this;o._uid=In++,U.performance&&ct&&(n="vue-perf-start:"+o._uid,r="vue-perf-end:"+o._uid,ct(n)),o._isVue=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r,n._parentElm=t._parentElm,n._refElm=t._refElm;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,t):o.$options=qe(Ln(o.constructor),t||{},o),ht(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Rt(e,t)}(o),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,r=t.$vnode=n._parentVnode,o=r&&r.context;t.$slots=Ft(n._renderChildren,o),t.$scopedSlots=e,t._c=function(e,n,r,o){return Nn(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return Nn(t,e,n,r,o,!0)};var i=r&&r.data;Le(t,"$attrs",i&&i.attrs||e,function(){!Vt&&le("$attrs is readonly.",t)},!0),Le(t,"$listeners",n._parentListeners||e,function(){!Vt&&le("$listeners is readonly.",t)},!0)}(o),qt(o,"beforeCreate"),function(e){var t=dn(e.$options.inject,e);t&&(Ee(!1),Object.keys(t).forEach(function(n){Le(e,n,t[n],function(){le('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)})}),Ee(!0))}(o),sn(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),qt(o,"created"),U.performance&&ct&&(o._name=pe(o,!1),ct(r),ut("vue "+o._name+" init",n,r)),o.$options.el&&o.$mount(o.$options.el)}}(Dn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(e){le("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){le("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Pe,e.prototype.$delete=De,e.prototype.$watch=function(e,t,n){if(f(t))return fn(this,e,t,n);(n=n||{}).user=!0;var r=new rn(this,e,t,n);return n.immediate&&t.call(this,r.value),function(){r.teardown()}}}(Dn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){if(Array.isArray(e))for(var r=0,o=e.length;r<o;r++)this.$on(e[r],n);else(this._events[e]||(this._events[e]=[])).push(n),t.test(e)&&(this._hasHookEvent=!0);return this},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)this.$off(e[r],t);return n}var i=n._events[e];if(!i)return n;if(!t)return n._events[e]=null,n;if(t)for(var a,s=i.length;s--;)if((a=i[s])===t||a.fn===t){i.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&fe('Event "'+n+'" is emitted in component '+pe(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+O(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?S(r):r;for(var o=S(arguments,1),i=0,a=r.length;i<a;i++)try{r[i].apply(t,o)}catch(n){et(n,t,'event handler for "'+e+'"')}}return t}}(Dn),function(e){e.prototype._update=function(e,t){var n=this;n._isMounted&&qt(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=Bt;Bt=n,n._vnode=e,o?n.$el=n.__patch__(o,e):(n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),Bt=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){qt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),qt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Dn),function(t){$n(t.prototype),t.prototype.$nextTick=function(e){return vt(e,this)},t.prototype._render=function(){var t,n=this,r=n.$options,o=r.render,i=r._parentVnode;for(var a in n.$slots)n.$slots[a]._rendered=!1;i&&(n.$scopedSlots=i.data.scopedSlots||e),n.$vnode=i;try{t=o.call(n._renderProxy,n.$createElement)}catch(e){if(et(e,n,"render"),n.$options.renderError)try{t=n.$options.renderError.call(n._renderProxy,n.$createElement,e)}catch(e){et(e,n,"renderError"),t=n._vnode}else t=n._vnode}return t instanceof we||(Array.isArray(t)&&le("Multiple root nodes returned from render function. Render function should return a single root node.",n),t=xe()),t.parent=i,t}}(Dn);var Vn=[String,RegExp,Array],zn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Vn,exclude:Vn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Bn(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){Un(e,function(e){return Hn(t,e)})}),this.$watch("exclude",function(t){Un(e,function(e){return!Hn(t,e)})})},render:function(){var e=this.$slots.default,t=Lt(e),n=t&&t.componentOptions;if(n){var r=Fn(n),o=this.include,i=this.exclude;if(o&&(!r||!Hn(o,r))||i&&r&&Hn(i,r))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,b(s,c),s.push(c)):(a[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&Bn(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return U},set:function(){le("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:le,extend:E,mergeOptions:qe,defineReactive:Le},e.set=Pe,e.delete=De,e.nextTick=vt,e.options=Object.create(null),F.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,E(e.options.components,zn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=S(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=qe(this.options,e),this}}(e),Rn(e),function(e){F.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&ze(e),"component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(Dn),Object.defineProperty(Dn.prototype,"$isServer",{get:ie}),Object.defineProperty(Dn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Dn,"FunctionalRenderContext",{value:An}),Dn.version="2.5.16";var Jn=m("style,class"),qn=m("input,textarea,option,select,progress"),Kn=function(e,t,n){return"value"===n&&qn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Wn=m("contenteditable,draggable,spellcheck"),Gn=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Yn="http://www.w3.org/1999/xlink",Zn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Xn=function(e){return Zn(e)?e.slice(6,e.length):""},Qn=function(e){return null==e||!1===e};function er(e){for(var t=e.data,r=e,o=e;n(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(t=tr(o.data,t));for(;n(r=r.parent);)r&&r.data&&(t=tr(t,r.data));return function(e,t){if(n(e)||n(t))return nr(e,rr(t));return""}(t.staticClass,t.class)}function tr(e,t){return{staticClass:nr(e.staticClass,t.staticClass),class:n(e.class)?[e.class,t.class]:t.class}}function nr(e,t){return e?t?e+" "+t:e:t||""}function rr(e){return Array.isArray(e)?function(e){for(var t,r="",o=0,i=e.length;o<i;o++)n(t=rr(e[o]))&&""!==t&&(r&&(r+=" "),r+=t);return r}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var or={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ir=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),ar=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),sr=function(e){return ir(e)||ar(e)};function cr(e){return ar(e)?"svg":"math"===e?"math":void 0}var ur=Object.create(null);var lr=m("text,number,password,search,email,tel,url");function fr(e){if("string"==typeof e){var t=document.querySelector(e);return t||(le("Cannot find element: "+e),document.createElement("div"))}return e}var dr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(or[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),pr={create:function(e,t){vr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(vr(e,!0),vr(t))},destroy:function(e){vr(e,!0)}};function vr(e,t){var r=e.data.ref;if(n(r)){var o=e.context,i=e.componentInstance||e.elm,a=o.$refs;t?Array.isArray(a[r])?b(a[r],i):a[r]===i&&(a[r]=void 0):e.data.refInFor?Array.isArray(a[r])?a[r].indexOf(i)<0&&a[r].push(i):a[r]=[i]:a[r]=i}}var hr=new we("",{},[]),mr=["create","activate","update","remove","destroy"];function yr(e,r){return e.key===r.key&&(e.tag===r.tag&&e.isComment===r.isComment&&n(e.data)===n(r.data)&&function(e,t){if("input"!==e.tag)return!0;var r,o=n(r=e.data)&&n(r=r.attrs)&&r.type,i=n(r=t.data)&&n(r=r.attrs)&&r.type;return o===i||lr(o)&&lr(i)}(e,r)||i(e.isAsyncPlaceholder)&&e.asyncFactory===r.asyncFactory&&t(r.asyncFactory.error))}function gr(e,t,r){var o,i,a={};for(o=t;o<=r;++o)n(i=e[o].key)&&(a[i]=o);return a}var br={create:_r,update:_r,destroy:function(e){_r(e,hr)}};function _r(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,i=e===hr,a=t===hr,s=Cr(e.data.directives,e.context),c=Cr(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,$r(o,"update",t,e),o.def&&o.def.componentUpdated&&l.push(o)):($r(o,"bind",t,e),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)$r(u[n],"inserted",t,e)};i?St(t,"insert",f):f()}l.length&&St(t,"postpatch",function(){for(var n=0;n<l.length;n++)$r(l[n],"componentUpdated",t,e)});if(!i)for(n in s)c[n]||$r(s[n],"unbind",e,e,a)}(e,t)}var wr=Object.create(null);function Cr(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=wr),o[xr(r)]=r,r.def=Ke(t.$options,"directives",r.name,!0);return o}function xr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function $r(e,t,n,r,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,r,o)}catch(r){et(r,n.context,"directive "+e.name+" "+t+" hook")}}var Ar=[pr,br];function kr(e,r){var o=r.componentOptions;if(!(n(o)&&!1===o.Ctor.options.inheritAttrs||t(e.data.attrs)&&t(r.data.attrs))){var i,a,s=r.elm,c=e.data.attrs||{},u=r.data.attrs||{};for(i in n(u.__ob__)&&(u=r.data.attrs=E({},u)),u)a=u[i],c[i]!==a&&Or(s,i,a);for(i in(Z||Q)&&u.value!==c.value&&Or(s,"value",u.value),c)t(u[i])&&(Zn(i)?s.removeAttributeNS(Yn,Xn(i)):Wn(i)||s.removeAttribute(i))}}function Or(e,t,n){e.tagName.indexOf("-")>-1?Tr(e,t,n):Gn(t)?Qn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Wn(t)?e.setAttribute(t,Qn(n)||"false"===n?"false":"true"):Zn(t)?Qn(n)?e.removeAttributeNS(Yn,Xn(t)):e.setAttributeNS(Yn,t,n):Tr(e,t,n)}function Tr(e,t,n){if(Qn(n))e.removeAttribute(t);else{if(Z&&!X&&"TEXTAREA"===e.tagName&&"placeholder"===t&&!e.__ieph){e.addEventListener("input",function t(n){n.stopImmediatePropagation(),e.removeEventListener("input",t)}),e.__ieph=!0}e.setAttribute(t,n)}}var Sr={create:kr,update:kr};function Er(e,r){var o=r.elm,i=r.data,a=e.data;if(!(t(i.staticClass)&&t(i.class)&&(t(a)||t(a.staticClass)&&t(a.class)))){var s=er(r),c=o._transitionClasses;n(c)&&(s=nr(s,rr(c))),s!==o._prevClass&&(o.setAttribute("class",s),o._prevClass=s)}}var jr,Mr,Nr,Ir,Lr,Pr,Dr,Rr={create:Er,update:Er},Fr=/[\w).+\-_$\]]/;function Hr(e){var t,n,r,o,i,a=!1,s=!1,c=!1,u=!1,l=0,f=0,d=0,p=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),a)39===t&&92!==n&&(a=!1);else if(s)34===t&&92!==n&&(s=!1);else if(c)96===t&&92!==n&&(c=!1);else if(u)47===t&&92!==n&&(u=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||l||f||d){switch(t){case 34:s=!0;break;case 39:a=!0;break;case 96:c=!0;break;case 40:d++;break;case 41:d--;break;case 91:f++;break;case 93:f--;break;case 123:l++;break;case 125:l--}if(47===t){for(var v=r-1,h=void 0;v>=0&&" "===(h=e.charAt(v));v--);h&&Fr.test(h)||(u=!0)}}else void 0===o?(p=r+1,o=e.slice(0,r).trim()):m();function m(){(i||(i=[])).push(e.slice(p,r).trim()),p=r+1}if(void 0===o?o=e.slice(0,r).trim():0!==p&&m(),i)for(r=0;r<i.length;r++)o=Ur(o,i[r]);return o}function Ur(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),o=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==o?","+o:o)}function Br(e){console.error("[Vue compiler]: "+e)}function Vr(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function zr(e,t,n){(e.props||(e.props=[])).push({name:t,value:n}),e.plain=!1}function Jr(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n}),e.plain=!1}function qr(e,t,n){e.attrsMap[t]=n,e.attrsList.push({name:t,value:n})}function Kr(e,t,n,r,o,i){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:o,modifiers:i}),e.plain=!1}function Wr(t,n,r,o,i,a){var s;o=o||e,a&&o.prevent&&o.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event."),o.capture&&(delete o.capture,n="!"+n),o.once&&(delete o.once,n="~"+n),o.passive&&(delete o.passive,n="&"+n),"click"===n&&(o.right?(n="contextmenu",delete o.right):o.middle&&(n="mouseup")),o.native?(delete o.native,s=t.nativeEvents||(t.nativeEvents={})):s=t.events||(t.events={});var c={value:r.trim()};o!==e&&(c.modifiers=o);var u=s[n];Array.isArray(u)?i?u.unshift(c):u.push(c):s[n]=u?i?[c,u]:[u,c]:c,t.plain=!1}function Gr(e,t,n){var r=Yr(e,":"+t)||Yr(e,"v-bind:"+t);if(null!=r)return Hr(r);if(!1!==n){var o=Yr(e,t);if(null!=o)return JSON.stringify(o)}}function Yr(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var o=e.attrsList,i=0,a=o.length;i<a;i++)if(o[i].name===t){o.splice(i,1);break}return n&&delete e.attrsMap[t],r}function Zr(e,t,n){var r=n||{},o=r.number,i="$$v";r.trim&&(i="(typeof $$v === 'string'? $$v.trim(): $$v)"),o&&(i="_n("+i+")");var a=Xr(t,i);e.model={value:"("+t+")",expression:'"'+t+'"',callback:"function ($$v) {"+a+"}"}}function Xr(e,t){var n=function(e){if(e=e.trim(),jr=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<jr-1)return(Ir=e.lastIndexOf("."))>-1?{exp:e.slice(0,Ir),key:'"'+e.slice(Ir+1)+'"'}:{exp:e,key:null};Mr=e,Ir=Lr=Pr=0;for(;!eo();)to(Nr=Qr())?ro(Nr):91===Nr&&no(Nr);return{exp:e.slice(0,Lr),key:e.slice(Lr+1,Pr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Qr(){return Mr.charCodeAt(++Ir)}function eo(){return Ir>=jr}function to(e){return 34===e||39===e}function no(e){var t=1;for(Lr=Ir;!eo();)if(to(e=Qr()))ro(e);else if(91===e&&t++,93===e&&t--,0===t){Pr=Ir;break}}function ro(e){for(var t=e;!eo()&&(e=Qr())!==t;);}var oo,io="__r",ao="__c";function so(e,t,n,r,o){t=function(e){return e._withTask||(e._withTask=function(){lt=!0;var t=e.apply(null,arguments);return lt=!1,t})}(t),n&&(t=function(e,t,n){var r=oo;return function o(){null!==e.apply(null,arguments)&&co(t,o,n,r)}}(t,e,r)),oo.addEventListener(e,t,re?{capture:r,passive:o}:r)}function co(e,t,n,r){(r||oo).removeEventListener(e,t._withTask||t,n)}function uo(e,r){if(!t(e.data.on)||!t(r.data.on)){var o=r.data.on||{},i=e.data.on||{};oo=r.elm,function(e){if(n(e[io])){var t=Z?"change":"input";e[t]=[].concat(e[io],e[t]||[]),delete e[io]}n(e[ao])&&(e.change=[].concat(e[ao],e.change||[]),delete e[ao])}(o),Tt(o,i,so,co,r.context),oo=void 0}}var lo={create:uo,update:uo};function fo(e,r){if(!t(e.data.domProps)||!t(r.data.domProps)){var o,i,a=r.elm,s=e.data.domProps||{},c=r.data.domProps||{};for(o in n(c.__ob__)&&(c=r.data.domProps=E({},c)),s)t(c[o])&&(a[o]="");for(o in c){if(i=c[o],"textContent"===o||"innerHTML"===o){if(r.children&&(r.children.length=0),i===s[o])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===o){a._value=i;var u=t(i)?"":String(i);po(a,u)&&(a.value=u)}else a[o]=i}}}function po(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var r=e.value,o=e._vModifiers;if(n(o)){if(o.lazy)return!1;if(o.number)return h(r)!==h(t);if(o.trim)return r.trim()!==t.trim()}return r!==t}(e,t))}var vo={create:fo,update:fo},ho=C(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t});function mo(e){var t=yo(e.style);return e.staticStyle?E(e.staticStyle,t):t}function yo(e){return Array.isArray(e)?j(e):"string"==typeof e?ho(e):e}var go,bo=/^--/,_o=/\s*!important$/,wo=function(e,t,n){if(bo.test(t))e.style.setProperty(t,n);else if(_o.test(n))e.style.setProperty(t,n.replace(_o,""),"important");else{var r=xo(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[r]=n[o];else e.style[r]=n}},Co=["Webkit","Moz","ms"],xo=C(function(e){if(go=go||document.createElement("div").style,"filter"!==(e=$(e))&&e in go)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Co.length;n++){var r=Co[n]+t;if(r in go)return r}});function $o(e,r){var o=r.data,i=e.data;if(!(t(o.staticStyle)&&t(o.style)&&t(i.staticStyle)&&t(i.style))){var a,s,c=r.elm,u=i.staticStyle,l=i.normalizedStyle||i.style||{},f=u||l,d=yo(r.data.style)||{};r.data.normalizedStyle=n(d.__ob__)?E({},d):d;var p=function(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=mo(o.data))&&E(r,n);(n=mo(e.data))&&E(r,n);for(var i=e;i=i.parent;)i.data&&(n=mo(i.data))&&E(r,n);return r}(r,!0);for(s in f)t(p[s])&&wo(c,s,"");for(s in p)(a=p[s])!==f[s]&&wo(c,s,null==a?"":a)}}var Ao={create:$o,update:$o};function ko(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Oo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function To(e){if(e){if("object"===(void 0===e?"undefined":s(e))){var t={};return!1!==e.css&&E(t,So(e.name||"v")),E(t,e),t}return"string"==typeof e?So(e):void 0}}var So=C(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),Eo=K&&!X,jo="transition",Mo="animation",No="transition",Io="transitionend",Lo="animation",Po="animationend";Eo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(No="WebkitTransition",Io="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lo="WebkitAnimation",Po="webkitAnimationEnd"));var Do=K?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Ro(e){Do(function(){Do(e)})}function Fo(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),ko(e,t))}function Ho(e,t){e._transitionClasses&&b(e._transitionClasses,t),Oo(e,t)}function Uo(e,t,n){var r=Vo(e,t),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===jo?Io:Po,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout(function(){c<a&&u()},i+1),e.addEventListener(s,l)}var Bo=/\b(transform|all)(,|$)/;function Vo(e,t){var n,r=window.getComputedStyle(e),o=r[No+"Delay"].split(", "),i=r[No+"Duration"].split(", "),a=zo(o,i),s=r[Lo+"Delay"].split(", "),c=r[Lo+"Duration"].split(", "),u=zo(s,c),l=0,f=0;return t===jo?a>0&&(n=jo,l=a,f=i.length):t===Mo?u>0&&(n=Mo,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?jo:Mo:null)?n===jo?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===jo&&Bo.test(r[No+"Property"])}}function zo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Jo(t)+Jo(e[n])}))}function Jo(e){return 1e3*Number(e.slice(0,-1))}function qo(e,r){var o=e.elm;n(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var i=To(e.data.transition);if(!t(i)&&!n(o._enterCb)&&1===o.nodeType){for(var a=i.css,s=i.type,u=i.enterClass,l=i.enterToClass,f=i.enterActiveClass,d=i.appearClass,p=i.appearToClass,v=i.appearActiveClass,m=i.beforeEnter,y=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,C=i.afterAppear,x=i.appearCancelled,$=i.duration,A=Bt,k=Bt.$vnode;k&&k.parent;)A=(k=k.parent).context;var O=!A._isMounted||!e.isRootInsert;if(!O||w||""===w){var T=O&&d?d:u,S=O&&v?v:f,E=O&&p?p:l,j=O&&_||m,M=O&&"function"==typeof w?w:y,N=O&&C||g,I=O&&x||b,L=h(c($)?$.enter:$);null!=L&&Wo(L,"enter",e);var P=!1!==a&&!X,R=Yo(M),F=o._enterCb=D(function(){P&&(Ho(o,E),Ho(o,S)),F.cancelled?(P&&Ho(o,T),I&&I(o)):N&&N(o),o._enterCb=null});e.data.show||St(e,"insert",function(){var t=o.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),M&&M(o,F)}),j&&j(o),P&&(Fo(o,T),Fo(o,S),Ro(function(){Ho(o,T),F.cancelled||(Fo(o,E),R||(Go(L)?setTimeout(F,L):Uo(o,s,F)))})),e.data.show&&(r&&r(),M&&M(o,F)),P||R||F()}}}function Ko(e,r){var o=e.elm;n(o._enterCb)&&(o._enterCb.cancelled=!0,o._enterCb());var i=To(e.data.transition);if(t(i)||1!==o.nodeType)return r();if(!n(o._leaveCb)){var a=i.css,s=i.type,u=i.leaveClass,l=i.leaveToClass,f=i.leaveActiveClass,d=i.beforeLeave,p=i.leave,v=i.afterLeave,m=i.leaveCancelled,y=i.delayLeave,g=i.duration,b=!1!==a&&!X,_=Yo(p),w=h(c(g)?g.leave:g);n(w)&&Wo(w,"leave",e);var C=o._leaveCb=D(function(){o.parentNode&&o.parentNode._pending&&(o.parentNode._pending[e.key]=null),b&&(Ho(o,l),Ho(o,f)),C.cancelled?(b&&Ho(o,u),m&&m(o)):(r(),v&&v(o)),o._leaveCb=null});y?y(x):x()}function x(){C.cancelled||(e.data.show||((o.parentNode._pending||(o.parentNode._pending={}))[e.key]=e),d&&d(o),b&&(Fo(o,u),Fo(o,f),Ro(function(){Ho(o,u),C.cancelled||(Fo(o,l),_||(Go(w)?setTimeout(C,w):Uo(o,s,C)))})),p&&p(o,C),b||_||C())}}function Wo(e,t,n){"number"!=typeof e?le("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&le("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Go(e){return"number"==typeof e&&!isNaN(e)}function Yo(e){if(t(e))return!1;var r=e.fns;return n(r)?Yo(Array.isArray(r)?r[0]:r):(e._length||e.length)>1}function Zo(e,t){!0!==t.data.show&&qo(t)}var Xo=function(e){var r,o,s={},c=e.modules,u=e.nodeOps;for(r=0;r<mr.length;++r)for(s[mr[r]]=[],o=0;o<c.length;++o)n(c[o][mr[r]])&&s[mr[r]].push(c[o][mr[r]]);function l(e){var t=u.parentNode(e);n(t)&&u.removeChild(t,e)}function f(e,t){return!t&&!e.ns&&!(U.ignoredElements.length&&U.ignoredElements.some(function(t){return d(t)?t.test(e.tag):t===e.tag}))&&U.isUnknownElement(e.tag)}var p=0;function v(e,t,r,o,a,c,l){if(n(e.elm)&&n(c)&&(e=c[l]=Ae(e)),e.isRootInsert=!a,!function(e,t,r,o){var a=e.data;if(n(a)){var c=n(e.componentInstance)&&a.keepAlive;if(n(a=a.hook)&&n(a=a.init)&&a(e,!1,r,o),n(e.componentInstance))return h(e,t),i(c)&&function(e,t,r,o){for(var i,a=e;a.componentInstance;)if(a=a.componentInstance._vnode,n(i=a.data)&&n(i=i.transition)){for(i=0;i<s.activate.length;++i)s.activate[i](hr,a);t.push(a);break}y(r,e.elm,o)}(e,t,r,o),!0}}(e,t,r,o)){var d=e.data,v=e.children,m=e.tag;n(m)?(d&&d.pre&&p++,f(e,p)&&le("Unknown custom element: <"+m+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?u.createElementNS(e.ns,m):u.createElement(m,e),w(e),g(e,v,t),n(d)&&_(e,t),y(r,e.elm,o),d&&d.pre&&p--):i(e.isComment)?(e.elm=u.createComment(e.text),y(r,e.elm,o)):(e.elm=u.createTextNode(e.text),y(r,e.elm,o))}}function h(e,t){n(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,b(e)?(_(e,t),w(e)):(vr(e),t.push(e))}function y(e,t,r){n(e)&&(n(r)?r.parentNode===e&&u.insertBefore(e,t,r):u.appendChild(e,t))}function g(e,t,n){if(Array.isArray(t)){k(t);for(var r=0;r<t.length;++r)v(t[r],n,e.elm,null,!0,t,r)}else a(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function b(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return n(e.tag)}function _(e,t){for(var o=0;o<s.create.length;++o)s.create[o](hr,e);n(r=e.data.hook)&&(n(r.create)&&r.create(hr,e),n(r.insert)&&t.push(e))}function w(e){var t;if(n(t=e.fnScopeId))u.setStyleScope(e.elm,t);else for(var r=e;r;)n(t=r.context)&&n(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t),r=r.parent;n(t=Bt)&&t!==e.context&&t!==e.fnContext&&n(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t)}function C(e,t,n,r,o,i){for(;r<=o;++r)v(n[r],i,e,t,!1,n,r)}function x(e){var t,r,o=e.data;if(n(o))for(n(t=o.hook)&&n(t=t.destroy)&&t(e),t=0;t<s.destroy.length;++t)s.destroy[t](e);if(n(t=e.children))for(r=0;r<e.children.length;++r)x(e.children[r])}function $(e,t,r,o){for(;r<=o;++r){var i=t[r];n(i)&&(n(i.tag)?(A(i),x(i)):l(i.elm))}}function A(e,t){if(n(t)||n(e.data)){var r,o=s.remove.length+1;for(n(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,o),n(r=e.componentInstance)&&n(r=r._vnode)&&n(r.data)&&A(r,t),r=0;r<s.remove.length;++r)s.remove[r](e,t);n(r=e.data.hook)&&n(r=r.remove)?r(e,t):t()}else l(e.elm)}function k(e){for(var t={},r=0;r<e.length;r++){var o=e[r],i=o.key;n(i)&&(t[i]?le("Duplicate keys detected: '"+i+"'. This may cause an update error.",o.context):t[i]=!0)}}function O(e,t,r,o){for(var i=r;i<o;i++){var a=t[i];if(n(a)&&yr(e,a))return i}}function T(e,r,o,a){if(e!==r){var c=r.elm=e.elm;if(i(e.isAsyncPlaceholder))n(r.asyncFactory.resolved)?M(e.elm,r,o):r.isAsyncPlaceholder=!0;else if(i(r.isStatic)&&i(e.isStatic)&&r.key===e.key&&(i(r.isCloned)||i(r.isOnce)))r.componentInstance=e.componentInstance;else{var l,f=r.data;n(f)&&n(l=f.hook)&&n(l=l.prepatch)&&l(e,r);var d=e.children,p=r.children;if(n(f)&&b(r)){for(l=0;l<s.update.length;++l)s.update[l](e,r);n(l=f.hook)&&n(l=l.update)&&l(e,r)}t(r.text)?n(d)&&n(p)?d!==p&&function(e,r,o,i,a){var s,c,l,f=0,d=0,p=r.length-1,h=r[0],m=r[p],y=o.length-1,g=o[0],b=o[y],_=!a;for(k(o);f<=p&&d<=y;)t(h)?h=r[++f]:t(m)?m=r[--p]:yr(h,g)?(T(h,g,i),h=r[++f],g=o[++d]):yr(m,b)?(T(m,b,i),m=r[--p],b=o[--y]):yr(h,b)?(T(h,b,i),_&&u.insertBefore(e,h.elm,u.nextSibling(m.elm)),h=r[++f],b=o[--y]):yr(m,g)?(T(m,g,i),_&&u.insertBefore(e,m.elm,h.elm),m=r[--p],g=o[++d]):(t(s)&&(s=gr(r,f,p)),t(c=n(g.key)?s[g.key]:O(g,r,f,p))?v(g,i,e,h.elm,!1,o,d):yr(l=r[c],g)?(T(l,g,i),r[c]=void 0,_&&u.insertBefore(e,l.elm,h.elm)):v(g,i,e,h.elm,!1,o,d),g=o[++d]);f>p?C(e,t(o[y+1])?null:o[y+1].elm,o,d,y,i):d>y&&$(0,r,f,p)}(c,d,p,o,a):n(p)?(n(e.text)&&u.setTextContent(c,""),C(c,null,p,0,p.length-1,o)):n(d)?$(0,d,0,d.length-1):n(e.text)&&u.setTextContent(c,""):e.text!==r.text&&u.setTextContent(c,r.text),n(f)&&n(l=f.hook)&&n(l=l.postpatch)&&l(e,r)}}}function S(e,t,r){if(i(r)&&n(e.parent))e.parent.data.pendingInsert=t;else for(var o=0;o<t.length;++o)t[o].data.hook.insert(t[o])}var E=!1,j=m("attrs,class,staticClass,staticStyle,key");function M(e,t,r,o){var a,s=t.tag,c=t.data,u=t.children;if(o=o||c&&c.pre,t.elm=e,i(t.isComment)&&n(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,r){return n(t.tag)?0===t.tag.indexOf("vue-component")||!f(t,r)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,o))return!1;if(n(c)&&(n(a=c.hook)&&n(a=a.init)&&a(t,!0),n(a=t.componentInstance)))return h(t,r),!0;if(n(s)){if(n(u))if(e.hasChildNodes())if(n(a=c)&&n(a=a.domProps)&&n(a=a.innerHTML)){if(a!==e.innerHTML)return"undefined"==typeof console||E||(E=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",a),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var l=!0,d=e.firstChild,p=0;p<u.length;p++){if(!d||!M(d,u[p],r,o)){l=!1;break}d=d.nextSibling}if(!l||d)return"undefined"==typeof console||E||(E=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,u)),!1}else g(t,u,r);if(n(c)){var v=!1;for(var m in c)if(!j(m)){v=!0,_(t,r);break}!v&&c.class&&$t(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,r,o,a,c,l){if(!t(r)){var f=!1,d=[];if(t(e))f=!0,v(r,d,c,l);else{var p=n(e.nodeType);if(!p&&yr(e,r))T(e,r,d,a);else{if(p){if(1===e.nodeType&&e.hasAttribute(R)&&(e.removeAttribute(R),o=!0),i(o)){if(M(e,r,d))return S(r,d,!0),e;le("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}e=function(e){return new we(u.tagName(e).toLowerCase(),{},[],void 0,e)}(e)}var h=e.elm,m=u.parentNode(h);if(v(r,d,h._leaveCb?null:m,u.nextSibling(h)),n(r.parent))for(var y=r.parent,g=b(r);y;){for(var _=0;_<s.destroy.length;++_)s.destroy[_](y);if(y.elm=r.elm,g){for(var w=0;w<s.create.length;++w)s.create[w](hr,y);var C=y.data.hook.insert;if(C.merged)for(var A=1;A<C.fns.length;A++)C.fns[A]()}else vr(y);y=y.parent}n(m)?$(0,[e],0,0):n(e.tag)&&x(e)}}return S(r,d,f),r.elm}n(e)&&x(e)}}({nodeOps:dr,modules:[Sr,Rr,lo,vo,Ao,K?{create:Zo,activate:Zo,remove:function(e,t){!0!==e.data.show?Ko(e,t):t()}}:{}].concat(Ar)});X&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&ai(e,"input")});var Qo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?St(n,"postpatch",function(){Qo.componentUpdated(e,t,n)}):ei(e,t,n.context),e._vOptions=[].map.call(e.options,ri)):("textarea"===n.tag||lr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",oi),e.addEventListener("compositionend",ii),e.addEventListener("change",ii),X&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){ei(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,ri);if(o.some(function(e,t){return!L(e,r[t])}))(e.multiple?t.value.some(function(e){return ni(e,o)}):t.value!==t.oldValue&&ni(t.value,o))&&ai(e,"change")}}};function ei(e,t,n){ti(e,t,n),(Z||Q)&&setTimeout(function(){ti(e,t,n)},0)}function ti(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],o)i=P(r,ri(a))>-1,a.selected!==i&&(a.selected=i);else if(L(ri(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}else le('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function ni(e,t){return t.every(function(t){return!L(t,e)})}function ri(e){return"_value"in e?e._value:e.value}function oi(e){e.target.composing=!0}function ii(e){e.target.composing&&(e.target.composing=!1,ai(e.target,"input"))}function ai(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function si(e){return!e.componentInstance||e.data&&e.data.transition?e:si(e.componentInstance._vnode)}var ci={model:Qo,show:{bind:function(e,t,n){var r=t.value,o=(n=si(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,qo(n,function(){e.style.display=i})):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=si(n)).data&&n.data.transition?(n.data.show=!0,r?qo(n,function(){e.style.display=e.__vOriginalDisplay}):Ko(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}}},ui={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function li(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?li(Lt(t.children)):e}function fi(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[$(i)]=o[i];return t}function di(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var pi={name:"transition",props:ui,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag||It(e)})).length){n.length>1&&le("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&le("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var i=li(o);if(!i)return o;if(this._leaving)return di(e,o);var s="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?s+"comment":s+i.tag:a(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var c=(i.data||(i.data={})).transition=fi(this),u=this._vnode,l=li(u);if(i.data.directives&&i.data.directives.some(function(e){return"show"===e.name})&&(i.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,l)&&!It(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=E({},c);if("out-in"===r)return this._leaving=!0,St(f,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),di(e,o);if("in-out"===r){if(It(i))return u;var d,p=function(){d()};St(c,"afterEnter",p),St(c,"enterCancelled",p),St(f,"delayLeave",function(e){d=e})}}return o}}},vi=E({tag:String,moveClass:String},ui);function hi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function mi(e){e.data.newPos=e.elm.getBoundingClientRect()}function yi(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete vi.mode;var gi={Transition:pi,TransitionGroup:{props:vi,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fi(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else{var u=c.componentOptions,l=u?u.Ctor.options.name||u.tag||"":c.tag;le("<transition-group> children must be keyed: <"+l+">")}}if(r){for(var f=[],d=[],p=0;p<r.length;p++){var v=r[p];v.data.transition=a,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?f.push(v):d.push(v)}this.kept=e(t,null,f),this.removed=d}return e(t,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(hi),e.forEach(mi),e.forEach(yi),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;Fo(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Io,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Io,e),n._moveCb=null,Ho(n,t))})}}))},methods:{hasMove:function(e,t){if(!Eo)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){Oo(n,e)}),ko(n,t),n.style.display="none",this.$el.appendChild(n);var r=Vo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Dn.config.mustUseProp=Kn,Dn.config.isReservedTag=sr,Dn.config.isReservedAttr=Jn,Dn.config.getTagNamespace=cr,Dn.config.isUnknownElement=function(e){if(!K)return!0;if(sr(e))return!1;if(e=e.toLowerCase(),null!=ur[e])return ur[e];var t=document.createElement(e);return e.indexOf("-")>-1?ur[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ur[e]=/HTMLUnknownElement/.test(t.toString())},E(Dn.options.directives,ci),E(Dn.options.components,gi),Dn.prototype.__patch__=K?Xo:M,Dn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=xe,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?le("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):le("Failed to mount component: template or render function not defined.",e)),qt(e,"beforeMount"),r=U.performance&&ct?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,i="vue-perf-end:"+r;ct(o);var a=e._render();ct(i),ut("vue "+t+" render",o,i),ct(o),e._update(a,n),ct(i),ut("vue "+t+" patch",o,i)}:function(){e._update(e._render(),n)},new rn(e,r,M,null,!0),n=!1,null==e.$vnode&&(e._isMounted=!0,qt(e,"mounted")),e}(this,e=e&&K?fr(e):void 0,t)},K&&setTimeout(function(){U.devtools&&(ae?ae.emit("init",Dn):te&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==U.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var bi=/\{\{((?:.|\n)+?)\}\}/g,_i=/[-.*+?^${}()|[\]\/\\]/g,wi=C(function(e){var t=e[0].replace(_i,"\\$&"),n=e[1].replace(_i,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});function Ci(e,t){var n=t?wi(t):bi;if(n.test(e)){for(var r,o,i,a=[],s=[],c=n.lastIndex=0;r=n.exec(e);){(o=r.index)>c&&(s.push(i=e.slice(c,o)),a.push(JSON.stringify(i)));var u=Hr(r[1].trim());a.push("_s("+u+")"),s.push({"@binding":u}),c=o+r[0].length}return c<e.length&&(s.push(i=e.slice(c)),a.push(JSON.stringify(i))),{expression:a.join("+"),tokens:s}}}var xi={staticKeys:["staticClass"],transformNode:function(e,t){var n=t.warn||Br,r=Yr(e,"class");r&&Ci(r,t.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.'),r&&(e.staticClass=JSON.stringify(r));var o=Gr(e,"class",!1);o&&(e.classBinding=o)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var $i,Ai={staticKeys:["staticStyle"],transformNode:function(e,t){var n=t.warn||Br,r=Yr(e,"style");r&&(Ci(r,t.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.'),e.staticStyle=JSON.stringify(ho(r)));var o=Gr(e,"style",!1);o&&(e.styleBinding=o)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},ki=function(e){return($i=$i||document.createElement("div")).innerHTML=e,$i.textContent},Oi=m("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Ti=m("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Si=m("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Ei=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ji="[a-zA-Z_][\\w\\-\\.]*",Mi="((?:"+ji+"\\:)?"+ji+")",Ni=new RegExp("^<"+Mi),Ii=/^\s*(\/?)>/,Li=new RegExp("^<\\/"+Mi+"[^>]*>"),Pi=/^<!DOCTYPE [^>]+>/i,Di=/^<!\--/,Ri=/^<!\[/,Fi=!1;"x".replace(/x(.)?/g,function(e,t){Fi=""===t});var Hi=m("script,style,textarea",!0),Ui={},Bi={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t"},Vi=/&(?:lt|gt|quot|amp);/g,zi=/&(?:lt|gt|quot|amp|#10|#9);/g,Ji=m("pre,textarea",!0),qi=function(e,t){return e&&Ji(e)&&"\n"===t[0]};function Ki(e,t){var n=t?zi:Vi;return e.replace(n,function(e){return Bi[e]})}var Wi,Gi,Yi,Zi,Xi,Qi,ea,ta,na=/^@|^v-on:/,ra=/^v-|^@|^:/,oa=/([^]*?)\s+(?:in|of)\s+([^]*)/,ia=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,aa=/^\(|\)$/g,sa=/:(.*)$/,ca=/^:|^v-bind:/,ua=/\.[^.]+/g,la=C(ki);function fa(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:function(e){for(var t={},n=0,r=e.length;n<r;n++)!t[e[n].name]||Z||Q||Wi("duplicate attribute: "+e[n].name),t[e[n].name]=e[n].value;return t}(t),parent:n,children:[]}}function da(e,t){Wi=t.warn||Br,Qi=t.isPreTag||N,ea=t.mustUseProp||N,ta=t.getTagNamespace||N,Yi=Vr(t.modules,"transformNode"),Zi=Vr(t.modules,"preTransformNode"),Xi=Vr(t.modules,"postTransformNode"),Gi=t.delimiters;var n,r,o=[],i=!1!==t.preserveWhitespace,a=!1,s=!1,c=!1;function u(e){c||(c=!0,Wi(e))}function l(e){e.pre&&(a=!1),Qi(e.tag)&&(s=!1);for(var n=0;n<Xi.length;n++)Xi[n](e,t)}return function(e,t){for(var n,r,o=[],i=t.expectHTML,a=t.isUnaryTag||N,s=t.canBeLeftOpenTag||N,c=0;e;){if(n=e,r&&Hi(r)){var u=0,l=r.toLowerCase(),f=Ui[l]||(Ui[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),d=e.replace(f,function(e,n,r){return u=r.length,Hi(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),qi(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});c+=e.length-d.length,e=d,k(l,c-u,c)}else{var p=e.indexOf("<");if(0===p){if(Di.test(e)){var v=e.indexOf("--\x3e");if(v>=0){t.shouldKeepComment&&t.comment(e.substring(4,v)),x(v+3);continue}}if(Ri.test(e)){var h=e.indexOf("]>");if(h>=0){x(h+2);continue}}var m=e.match(Pi);if(m){x(m[0].length);continue}var y=e.match(Li);if(y){var g=c;x(y[0].length),k(y[1],g,c);continue}var b=$();if(b){A(b),qi(r,e)&&x(1);continue}}var _=void 0,w=void 0,C=void 0;if(p>=0){for(w=e.slice(p);!(Li.test(w)||Ni.test(w)||Di.test(w)||Ri.test(w)||(C=w.indexOf("<",1))<0);)p+=C,w=e.slice(p);_=e.substring(0,p),x(p)}p<0&&(_=e,e=""),t.chars&&_&&t.chars(_)}if(e===n){t.chars&&t.chars(e),!o.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"');break}}function x(t){c+=t,e=e.substring(t)}function $(){var t=e.match(Ni);if(t){var n,r,o={tagName:t[1],attrs:[],start:c};for(x(t[0].length);!(n=e.match(Ii))&&(r=e.match(Ei));)x(r[0].length),o.attrs.push(r);if(n)return o.unarySlash=n[1],x(n[0].length),o.end=c,o}}function A(e){var n=e.tagName,c=e.unarySlash;i&&("p"===r&&Si(n)&&k(r),s(n)&&r===n&&k(n));for(var u=a(n)||!!c,l=e.attrs.length,f=new Array(l),d=0;d<l;d++){var p=e.attrs[d];Fi&&-1===p[0].indexOf('""')&&(""===p[3]&&delete p[3],""===p[4]&&delete p[4],""===p[5]&&delete p[5]);var v=p[3]||p[4]||p[5]||"",h="a"===n&&"href"===p[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[d]={name:p[1],value:Ki(v,h)}}u||(o.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f}),r=n),t.start&&t.start(n,f,u,e.start,e.end)}function k(e,n,i){var a,s;if(null==n&&(n=c),null==i&&(i=c),e&&(s=e.toLowerCase()),e)for(a=o.length-1;a>=0&&o[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var u=o.length-1;u>=a;u--)(u>a||!e)&&t.warn&&t.warn("tag <"+o[u].tag+"> has no matching end tag."),t.end&&t.end(o[u].tag,n,i);o.length=a,r=a&&o[a-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,i):"p"===s&&(t.start&&t.start(e,[],!1,n,i),t.end&&t.end(e,n,i))}k()}(e,{warn:Wi,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,start:function(e,i,c){var f=r&&r.ns||ta(e);Z&&"svg"===f&&(i=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ya.test(r.name)||(r.name=r.name.replace(ga,""),t.push(r))}return t}(i));var d=fa(e,i,r);f&&(d.ns=f),function(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}(d)&&!ie()&&(d.forbidden=!0,Wi("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed."));for(var p=0;p<Zi.length;p++)d=Zi[p](d,t)||d;function v(e){"slot"!==e.tag&&"template"!==e.tag||u("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes."),e.attrsMap.hasOwnProperty("v-for")&&u("Cannot use v-for on stateful component root element because it renders multiple elements.")}if(a||(!function(e){null!=Yr(e,"v-pre")&&(e.pre=!0)}(d),d.pre&&(a=!0)),Qi(d.tag)&&(s=!0),a?function(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}(d):d.processed||(va(d),function(e){var t=Yr(e,"v-if");if(t)e.if=t,ha(e,{exp:t,block:e});else{null!=Yr(e,"v-else")&&(e.else=!0);var n=Yr(e,"v-else-if");n&&(e.elseif=n)}}(d),function(e){null!=Yr(e,"v-once")&&(e.once=!0)}(d),pa(d,t)),n?o.length||(n.if&&(d.elseif||d.else)?(v(d),ha(n,{exp:d.elseif,block:d})):u("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.")):v(n=d),r&&!d.forbidden)if(d.elseif||d.else)!function(e,t){var n=function(e){var t=e.length;for(;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&Wi('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.'),e.pop()}}(t.children);n&&n.if?ha(n,{exp:e.elseif,block:e}):Wi("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.")}(d,r);else if(d.slotScope){r.plain=!1;var h=d.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[h]=d}else r.children.push(d),d.parent=r;c?l(d):(r=d,o.push(d))},end:function(){var e=o[o.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&!s&&e.children.pop(),o.length-=1,r=o[o.length-1],l(e)},chars:function(t){if(r){if(!Z||"textarea"!==r.tag||r.attrsMap.placeholder!==t){var n,o=r.children;if(t=s||t.trim()?function(e){return"script"===e.tag||"style"===e.tag}(r)?t:la(t):i&&o.length?" ":"")!a&&" "!==t&&(n=Ci(t,Gi))?o.push({type:2,expression:n.expression,tokens:n.tokens,text:t}):" "===t&&o.length&&" "===o[o.length-1].text||o.push({type:3,text:t})}}else t===e?u("Component template requires a root element, rather than just text."):(t=t.trim())&&u('text "'+t+'" outside root element will be ignored.')},comment:function(e){r.children.push({type:3,text:e,isComment:!0})}}),n}function pa(e,t){!function(e){var t=Gr(e,"key");t&&("template"===e.tag&&Wi("<template> cannot be keyed. Place the key on real elements instead."),e.key=t)}(e),e.plain=!e.key&&!e.attrsList.length,function(e){var t=Gr(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){if("slot"===e.tag)e.slotName=Gr(e,"name"),e.key&&Wi("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.");else{var t;"template"===e.tag?((t=Yr(e,"scope"))&&Wi('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',!0),e.slotScope=t||Yr(e,"slot-scope")):(t=Yr(e,"slot-scope"))&&(e.attrsMap["v-for"]&&Wi("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",!0),e.slotScope=t);var n=Gr(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,"template"===e.tag||e.slotScope||Jr(e,"slot",n))}}(e),function(e){var t;(t=Gr(e,"is"))&&(e.component=t);null!=Yr(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var n=0;n<Yi.length;n++)e=Yi[n](e,t)||e;!function(e){var t,n,r,o,i,a,s,c=e.attrsList;for(t=0,n=c.length;t<n;t++)if(r=o=c[t].name,i=c[t].value,ra.test(r))if(e.hasBindings=!0,(a=ma(r))&&(r=r.replace(ua,"")),ca.test(r))r=r.replace(ca,""),i=Hr(i),s=!1,a&&(a.prop&&(s=!0,"innerHtml"===(r=$(r))&&(r="innerHTML")),a.camel&&(r=$(r)),a.sync&&Wr(e,"update:"+$(r),Xr(i,"$event"))),s||!e.component&&ea(e.tag,e.attrsMap.type,r)?zr(e,r,i):Jr(e,r,i);else if(na.test(r))r=r.replace(na,""),Wr(e,r,i,a,!1,Wi);else{var u=(r=r.replace(ra,"")).match(sa),l=u&&u[1];l&&(r=r.slice(0,-(l.length+1))),Kr(e,r,o,i,l,a),"model"===r&&ba(e,i)}else{var f=Ci(i,Gi);f&&Wi(r+'="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.'),Jr(e,r,JSON.stringify(i)),!e.component&&"muted"===r&&ea(e.tag,e.attrsMap.type,r)&&zr(e,r,"true")}}(e)}function va(e){var t;if(t=Yr(e,"v-for")){var n=function(e){var t=e.match(oa);if(!t)return;var n={};n.for=t[2].trim();var r=t[1].trim().replace(aa,""),o=r.match(ia);o?(n.alias=r.replace(ia,""),n.iterator1=o[1].trim(),o[2]&&(n.iterator2=o[2].trim())):n.alias=r;return n}(t);n?E(e,n):Wi("Invalid v-for expression: "+t)}}function ha(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function ma(e){var t=e.match(ua);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}var ya=/^xmlns:NS\d+/,ga=/^NS\d+:/;function ba(e,t){for(var n=e;n;)n.for&&n.alias===t&&Wi("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.'),n=n.parent}function _a(e){return fa(e.tag,e.attrsList.slice(),e.parent)}var wa=[xi,Ai,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Gr(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var o=Yr(e,"v-if",!0),i=o?"&&("+o+")":"",a=null!=Yr(e,"v-else",!0),s=Yr(e,"v-else-if",!0),c=_a(e);va(c),qr(c,"type","checkbox"),pa(c,t),c.processed=!0,c.if="("+n+")==='checkbox'"+i,ha(c,{exp:c.if,block:c});var u=_a(e);Yr(u,"v-for",!0),qr(u,"type","radio"),pa(u,t),ha(c,{exp:"("+n+")==='radio'"+i,block:u});var l=_a(e);return Yr(l,"v-for",!0),qr(l,":type",n),pa(l,t),ha(c,{exp:o,block:l}),a?c.else=!0:s&&(c.elseif=s),c}}}}];var Ca,xa,$a={expectHTML:!0,modules:wa,directives:{model:function(e,t,n){Dr=n;var r=t.value,o=t.modifiers,i=e.tag,a=e.attrsMap.type;if("input"===i&&"file"===a&&Dr("<"+e.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.'),e.component)return Zr(e,r,o),!1;if("select"===i)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Xr(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Wr(e,"change",r,null,!0)}(e,r,o);else if("input"===i&&"checkbox"===a)!function(e,t,n){var r=n&&n.number,o=Gr(e,"value")||"null",i=Gr(e,"true-value")||"true",a=Gr(e,"false-value")||"false";zr(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),Wr(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Xr(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Xr(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Xr(t,"$$c")+"}",null,!0)}(e,r,o);else if("input"===i&&"radio"===a)!function(e,t,n){var r=n&&n.number,o=Gr(e,"value")||"null";zr(e,"checked","_q("+t+","+(o=r?"_n("+o+")":o)+")"),Wr(e,"change",Xr(t,o),null,!0)}(e,r,o);else if("input"===i||"textarea"===i)!function(e,t,n){var r=e.attrsMap.type,o=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],i=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(o&&!i){var a=e.attrsMap["v-bind:value"]?"v-bind:value":":value";Dr(a+'="'+o+'" conflicts with v-model on the same element because the latter already expands to a value binding internally')}var s=n||{},c=s.lazy,u=s.number,l=s.trim,f=!c&&"range"!==r,d=c?"change":"range"===r?io:"input",p="$event.target.value";l&&(p="$event.target.value.trim()"),u&&(p="_n("+p+")");var v=Xr(t,p);f&&(v="if($event.target.composing)return;"+v),zr(e,"value","("+t+")"),Wr(e,d,v,null,!0),(l||u)&&Wr(e,"blur","$forceUpdate()")}(e,r,o);else{if(!U.isReservedTag(i))return Zr(e,r,o),!1;Dr("<"+e.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.")}return!0},text:function(e,t){t.value&&zr(e,"textContent","_s("+t.value+")")},html:function(e,t){t.value&&zr(e,"innerHTML","_s("+t.value+")")}},isPreTag:function(e){return"pre"===e},isUnaryTag:Oi,mustUseProp:Kn,canBeLeftOpenTag:Ti,isReservedTag:sr,getTagNamespace:cr,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}(wa)},Aa=C(function(e){return m("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))});function ka(e,t){e&&(Ca=Aa(t.staticKeys||""),xa=t.isReservedTag||N,function e(t){t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||y(e.tag)||!xa(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Ca)))}(t);if(1===t.type){if(!xa(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,r=t.children.length;n<r;n++){var o=t.children[n];e(o),o.static||(t.static=!1)}if(t.ifConditions)for(var i=1,a=t.ifConditions.length;i<a;i++){var s=t.ifConditions[i].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var r=0,o=t.children.length;r<o;r++)e(t.children[r],n||!!t.for);if(t.ifConditions)for(var i=1,a=t.ifConditions.length;i<a;i++)e(t.ifConditions[i].block,n)}}(e,!1))}var Oa=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Ta=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Sa={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Ea={esc:"Escape",tab:"Tab",enter:"Enter",space:" ",up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete"]},ja=function(e){return"if("+e+")return null;"},Ma={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ja("$event.target !== $event.currentTarget"),ctrl:ja("!$event.ctrlKey"),shift:ja("!$event.shiftKey"),alt:ja("!$event.altKey"),meta:ja("!$event.metaKey"),left:ja("'button' in $event && $event.button !== 0"),middle:ja("'button' in $event && $event.button !== 1"),right:ja("'button' in $event && $event.button !== 2")};function Na(e,t,n){var r=t?"nativeOn:{":"on:{";for(var o in e)r+='"'+o+'":'+Ia(o,e[o])+",";return r.slice(0,-1)+"}"}function Ia(e,t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return Ia(e,t)}).join(",")+"]";var n=Ta.test(t.value),r=Oa.test(t.value);if(t.modifiers){var o="",i="",a=[];for(var s in t.modifiers)if(Ma[s])i+=Ma[s],Sa[s]&&a.push(s);else if("exact"===s){var c=t.modifiers;i+=ja(["ctrl","shift","alt","meta"].filter(function(e){return!c[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else a.push(s);return a.length&&(o+=function(e){return"if(!('button' in $event)&&"+e.map(La).join("&&")+")return null;"}(a)),i&&(o+=i),"function($event){"+o+(n?"return "+t.value+"($event)":r?"return ("+t.value+")($event)":t.value)+"}"}return n||r?t.value:"function($event){"+t.value+"}"}function La(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Sa[e],r=Ea[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Pa={on:function(e,t){t.modifiers&&le("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:M},Da=function(e){this.options=e,this.warn=e.warn||Br,this.transforms=Vr(e.modules,"transformCode"),this.dataGenFns=Vr(e.modules,"genData"),this.directives=E(E({},Pa),e.directives);var t=e.isReservedTag||N;this.maybeComponent=function(e){return!t(e.tag)},this.onceId=0,this.staticRenderFns=[]};function Ra(e,t){var n=new Da(t);return{render:"with(this){return "+(e?Fa(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Fa(e,t){if(e.staticRoot&&!e.staticProcessed)return Ha(e,t);if(e.once&&!e.onceProcessed)return Ua(e,t);if(e.for&&!e.forProcessed)return function(e,t,n,r){var o=e.for,i=e.alias,a=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+i+" in "+o+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',!0);return e.forProcessed=!0,(r||"_l")+"(("+o+"),function("+i+a+s+"){return "+(n||Fa)(e,t)+"})"}(e,t);if(e.if&&!e.ifProcessed)return Ba(e,t);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=Ja(e,t),o="_t("+n+(r?","+r:""),i=e.attrs&&"{"+e.attrs.map(function(e){return $(e.name)+":"+e.value}).join(",")+"}",a=e.attrsMap["v-bind"];!i&&!a||r||(o+=",null");i&&(o+=","+i);a&&(o+=(i?"":",null")+","+a);return o+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:Ja(t,n,!0);return"_c("+e+","+Va(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r=e.plain?void 0:Va(e,t),o=e.inlineTemplate?null:Ja(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(o?","+o:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return Ja(e,t)||"void 0"}function Ha(e,t){return e.staticProcessed=!0,t.staticRenderFns.push("with(this){return "+Fa(e,t)+"}"),"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Ua(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Ba(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Fa(e,t)+","+t.onceId+++","+n+")":(t.warn("v-once can only be used inside v-for that is keyed. "),Fa(e,t))}return Ha(e,t)}function Ba(e,t,n,r){return e.ifProcessed=!0,function e(t,n,r,o){if(!t.length)return o||"_e()";var i=t.shift();return i.exp?"("+i.exp+")?"+a(i.block)+":"+e(t,n,r,o):""+a(i.block);function a(e){return r?r(e,n):e.once?Ua(e,n):Fa(e,n)}}(e.ifConditions.slice(),t,n,r)}function Va(e,t){var n="{",r=function(e,t){var n=e.directives;if(!n)return;var r,o,i,a,s="directives:[",c=!1;for(r=0,o=n.length;r<o;r++){i=n[r],a=!0;var u=t.directives[i.name];u&&(a=!!u(e,i,t.warn)),a&&(c=!0,s+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}if(c)return s.slice(0,-1)+"]"}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)n+=t.dataGenFns[o](e);if(e.attrs&&(n+="attrs:{"+Wa(e.attrs)+"},"),e.props&&(n+="domProps:{"+Wa(e.props)+"},"),e.events&&(n+=Na(e.events,!1,t.warn)+","),e.nativeEvents&&(n+=Na(e.nativeEvents,!0,t.warn)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t){return"scopedSlots:_u(["+Object.keys(e).map(function(n){return za(n,e[n],t)}).join(",")+"])"}(e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=function(e,t){var n=e.children[0];1===e.children.length&&1===n.type||t.warn("Inline-template components must have exactly one child element.");if(1===n.type){var r=Ra(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function za(e,t,n){return t.for&&!t.forProcessed?function(e,t,n){var r=t.for,o=t.alias,i=t.iterator1?","+t.iterator1:"",a=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,"_l(("+r+"),function("+o+i+a+"){return "+za(e,t,n)+"})"}(e,t,n):"{key:"+e+",fn:"+("function("+String(t.slotScope)+"){return "+("template"===t.tag?t.if?t.if+"?"+(Ja(t,n)||"undefined")+":undefined":Ja(t,n)||"undefined":Fa(t,n))+"}")+"}"}function Ja(e,t,n,r,o){var i=e.children;if(i.length){var a=i[0];if(1===i.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag)return(r||Fa)(a,t);var s=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var o=e[r];if(1===o.type){if(qa(o)||o.ifConditions&&o.ifConditions.some(function(e){return qa(e.block)})){n=2;break}(t(o)||o.ifConditions&&o.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}(i,t.maybeComponent):0,c=o||Ka;return"["+i.map(function(e){return c(e,t)}).join(",")+"]"+(s?","+s:"")}}function qa(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Ka(e,t){return 1===e.type?Fa(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:Ga(JSON.stringify(e.text)))+")"}(e)}function Wa(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+Ga(r.value)+","}return t.slice(0,-1)}function Ga(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var Ya=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),Za=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),Xa=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function Qa(e){var t=[];return e&&function e(t,n){if(1===t.type){for(var r in t.attrsMap)if(ra.test(r)){var o=t.attrsMap[r];o&&("v-for"===r?ts(t,'v-for="'+o+'"',n):na.test(r)?es(o,r+'="'+o+'"',n):rs(o,r+'="'+o+'"',n))}if(t.children)for(var i=0;i<t.children.length;i++)e(t.children[i],n)}else 2===t.type&&rs(t.expression,t.text,n)}(e,t),t}function es(e,t,n){var r=e.replace(Xa,""),o=r.match(Za);o&&"$"!==r.charAt(o.index-1)&&n.push('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+t.trim()),rs(e,t,n)}function ts(e,t,n){rs(e.for||"",t,n),ns(e.alias,"v-for alias",t,n),ns(e.iterator1,"v-for iterator",t,n),ns(e.iterator2,"v-for iterator",t,n)}function ns(e,t,n,r){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(o){r.push("invalid "+t+' "'+e+'" in expression: '+n.trim())}}function rs(e,t,n){try{new Function("return "+e)}catch(o){var r=e.replace(Xa,"").match(Ya);r?n.push('avoid using JavaScript keyword as property name: "'+r[0]+'"\n  Raw expression: '+t.trim()):n.push("invalid expression: "+o.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n")}}function os(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),M}}var is,as=function(e){return function(t){function n(n,r){var o=Object.create(t),i=[],a=[];if(o.warn=function(e,t){(t?a:i).push(e)},r)for(var s in r.modules&&(o.modules=(t.modules||[]).concat(r.modules)),r.directives&&(o.directives=E(Object.create(t.directives||null),r.directives)),r)"modules"!==s&&"directives"!==s&&(o[s]=r[s]);var c=e(n,o);return i.push.apply(i,Qa(c.ast)),c.errors=i,c.tips=a,c}return{compile:n,compileToFunctions:function(e){var t=Object.create(null);return function(n,r,o){var i=(r=E({},r)).warn||le;delete r.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&i("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var a=r.delimiters?String(r.delimiters)+n:n;if(t[a])return t[a];var s=e(n,r);s.errors&&s.errors.length&&i("Error compiling template:\n\n"+n+"\n\n"+s.errors.map(function(e){return"- "+e}).join("\n")+"\n",o),s.tips&&s.tips.length&&s.tips.forEach(function(e){return fe(e,o)});var c={},u=[];return c.render=os(s.render,u),c.staticRenderFns=s.staticRenderFns.map(function(e){return os(e,u)}),s.errors&&s.errors.length||!u.length||i("Failed to generate render function:\n\n"+u.map(function(e){var t=e.err,n=e.code;return t.toString()+" in\n\n"+n+"\n"}).join("\n"),o),t[a]=c}}(n)}}}(function(e,t){var n=da(e.trim(),t);!1!==t.optimize&&ka(n,t);var r=Ra(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}})($a).compileToFunctions;function ss(e){return(is=is||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',is.innerHTML.indexOf("&#10;")>0}var cs=!!K&&ss(!1),us=!!K&&ss(!0),ls=C(function(e){var t=fr(e);return t&&t.innerHTML}),fs=Dn.prototype.$mount;return Dn.prototype.$mount=function(e,t){if((e=e&&fr(e))===document.body||e===document.documentElement)return le("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=ls(r))||le("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return le("invalid template option:"+r,this),this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){U.performance&&ct&&ct("compile");var o=as(r,{shouldDecodeNewlines:cs,shouldDecodeNewlinesForHref:us,delimiters:n.delimiters,comments:n.comments},this),i=o.render,a=o.staticRenderFns;n.render=i,n.staticRenderFns=a,U.performance&&ct&&(ct("compile end"),ut("vue "+this._name+" compile","compile","compile end"))}}return fs.call(this,e,t)},Dn.compile=as,Dn})}).call(this,n(0),n(6).setImmediate)},function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return h});var r=n(1),o=n.n(r),i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},s=i&&(document.head||document.getElementsByTagName("head")[0]),c=null,u=0,l=!1,f=function(){},d=null,p="data-vue-ssr-id",v="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,n,r){l=n,d=r||{};var i=o()(e,t);return m(i),function(t){for(var n=[],r=0;r<i.length;r++){var s=i[r];(c=a[s.id]).refs--,n.push(c)}t?m(i=o()(e,t)):i=[];for(r=0;r<n.length;r++){var c;if(0===(c=n[r]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete a[c.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],r=a[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(g(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var i=[];for(o=0;o<n.parts.length;o++)i.push(g(n.parts[o]));a[n.id]={id:n.id,refs:1,parts:i}}}}function y(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function g(e){var t,n,r=document.querySelector("style["+p+'~="'+e.id+'"]');if(r){if(l)return f;r.parentNode.removeChild(r)}if(v){var o=u++;r=c||(c=y()),t=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=y(),t=function(e,t){var n=t.css,r=t.media,o=t.sourceMap;r&&e.setAttribute("media",r);d.ssrId&&e.setAttribute(p,t.id);o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){(e.exports=n(9)(!0)).push([e.i,"\n#share-buttons a[data-v-5de655f2] {\n  display: inline-block;\n  border: 1px solid #ddd;\n  padding: 10px 20px;\n  margin-right: 10px;\n  text-transform: uppercase;\n  color: #999;\n  text-decoration: none;\n  height: 300px;\n}\n#share-buttons a[data-v-5de655f2]:hover {\n  color: #333;\n  border-color: #888;\n}\n","",{version:3,sources:["C:/Users/Mugano/T-Vue-Proj/src/components/src/components/Hello.vue"],names:[],mappings:";AA4BA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;EACA,mBAAA;EACA,0BAAA;EACA,YAAA;EACA,sBAAA;EACA,cAAA;CACA;AACA;EACA,YAAA;EACA,mBAAA;CACA",file:"Hello.vue",sourcesContent:['<template>\r\n\r\n  <div id="share-buttons">\r\n     <h1> Am a Vue Component</h1> \r\n    <a href="#" @click.prevent="share" v-if="facebook">Facebook</a>\r\n    <a href="#" @click.prevent="share" v-if="twitter">Twitter</a>\r\n    <a href="#" @click.prevent="share" v-if="gplus">Google+</a>\r\n  \r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    facebook: { type: Boolean, default: true },\r\n    twitter: { type: Boolean, default: true },\r\n    gplus: { type: Boolean, default: true }\r\n  },\r\n  methods: {\r\n    share ($event) {\r\n      window.alert(\'Share on \' + $event.target.innerHTML);\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n  #share-buttons a {\r\n    display: inline-block;\r\n    border: 1px solid #ddd;\r\n    padding: 10px 20px;\r\n    margin-right: 10px;\r\n    text-transform: uppercase;\r\n    color: #999;\r\n    text-decoration: none;\r\n    height: 300px;\r\n  }\r\n  #share-buttons a:hover {\r\n    color: #333;\r\n    border-color: #888;\r\n  }\r\n</style>'],sourceRoot:""}])},function(e,t,n){var r=n(10);"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n(8).default)("1cd8c904",r,!1,{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9IZWxsby52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVsbG8udnVlPzRkZjciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVsbG8udnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtY3VzdG9tLWVsZW1lbnQvZGlzdC92dWUtY3VzdG9tLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvLnZ1ZT82NWNmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvLnZ1ZT8wYzEyIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwiX3R5cGVvZiIsInBhcmVudElkIiwibGlzdCIsInN0eWxlcyIsIm5ld1N0eWxlcyIsImxlbmd0aCIsIml0ZW0iLCJpZCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydCIsInBhcnRzIiwicHVzaCIsIkhlbGxvIiwicHJvcHMiLCJmYWNlYm9vayIsInR5cGUiLCJCb29sZWFuIiwiZGVmYXVsdCIsInR3aXR0ZXIiLCJncGx1cyIsIm1ldGhvZHMiLCJzaGFyZSIsIiRldmVudCIsImFsZXJ0IiwidGFyZ2V0IiwiaW5uZXJIVE1MIiwicmVuZGVyIiwiX3ZtIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsIl9jIiwiX3NlbGYiLCJhdHRycyIsIl92IiwiaHJlZiIsIm9uIiwiY2xpY2siLCJwcmV2ZW50RGVmYXVsdCIsIl9lIiwiX3dpdGhTdHJpcHBlZCIsImRpc3Bvc2VkIiwiQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsInN0YXRpY1JlbmRlckZucyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImhvb2siLCJvcHRpb25zIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsIl9zY29wZUlkIiwiY29udGV4dCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJwYXJlbnQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiYWRkIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJoIiwiZXhpc3RpbmciLCJiZWZvcmVDcmVhdGUiLCJjb25jYXQiLCJub3JtYWxpemVDb21wb25lbnQiLCJfX2ZpbGUiLCJjb21wb25lbnRzX0hlbGxvIiwiVnVlIiwiVnVlQ3VzdG9tRWxlbWVudCIsInVzZSIsImN1c3RvbUVsZW1lbnQiLCJnbG9iYWwiLCJmYWN0b3J5IiwiX3R5cGVvZjIiLCJ1bmRlZmluZWQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsInNldFByb3RvdHlwZU9mIiwib2JqIiwicHJvdG8iLCJfX3Byb3RvX18iLCJpc0VTMjAxNSQxIiwiUmVmbGVjdCIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX0N1c3RvbUVsZW1lbnQiLCJjb25zdHJ1Y3QiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwicmVnaXN0ZXJDdXN0b21FbGVtZW50IiwidGFnIiwiYXJndW1lbnRzIiwiY3VzdG9tRWxlbWVudHMiLCJDdXN0b21FbGVtZW50IiwiX0N1c3RvbUVsZW1lbnQyIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsImdldFByb3RvdHlwZU9mIiwibWUiLCJjb25zdHJ1Y3RvckNhbGxiYWNrIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImRlZmluZSIsIl9DdXN0b21FbGVtZW50MyIsInNoYWRvdyIsImF0dGFjaFNoYWRvdyIsIm9sZFZhbHVlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwic3RyIiwicmVwbGFjZSIsIl8iLCJ0b1VwcGVyQ2FzZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwidG9Mb3dlckNhc2UiLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJBcnJheSIsIml0ZXJhdG9yIiwiY29udmVydEF0dHJpYnV0ZVZhbHVlIiwib3ZlcnJpZGVUeXBlIiwicHJvcHNWYWx1ZSIsImlzQm9vbGVhbiIsImluZGV4T2YiLCJ2YWx1ZVBhcnNlZCIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsImlzTmFOIiwiaXNGaW5pdGUiLCJtYXRjaCIsImV4dHJhY3RQcm9wcyIsImNvbGxlY3Rpb24iLCJmb3JFYWNoIiwicHJvcCIsImNhbWVsQ2FzZVByb3AiLCJjYW1lbENhc2UiLCJ0eXBlcyIsImdldFByb3BzIiwiY29tcG9uZW50RGVmaW5pdGlvbiIsIm1peGlucyIsIm1peGluIiwiZXh0ZW5kcyIsImdldEF0dHJpYnV0ZXMiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsInRlbXBsYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbGVtZW50IiwiZWxlbWVudE9wdGlvbnMiLCJ2dWVUZW1wbGF0ZUNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImNvbnRlbnQiLCJwbGFjZWhvbGRlciIsImRvY3VtZW50IiwiZ2V0Q2hpbGROb2RlcyIsIm1hcCIsImNoaWxkIiwidGFnTmFtZSIsImRvbVByb3BzIiwic2xvdCIsImN1c3RvbUVtaXQiLCJldmVudE5hbWUiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJldmVudCIsImRldGFpbCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZVZ1ZUluc3RhbmNlIiwiX192dWVfY3VzdG9tX2VsZW1lbnRfXyIsIkNvbXBvbmVudERlZmluaXRpb24iLCJ1dGlsIiwiZXh0ZW5kIiwicHJvcHNEYXRhIiwiaW5kZXgiLCJwcm9wQ2FtZWxDYXNlIiwicHJvcFZhbHVlIiwiQXR0ciIsImdldFByb3BzRGF0YSIsInZ1ZVZlcnNpb24iLCJ2ZXJzaW9uIiwicGFyc2VJbnQiLCJzcGxpdCIsIiRlbWl0IiwiX3Byb3RvX18kJGVtaXQiLCJhcHBseSIsImN0b3JPcHRpb25zIiwiX0N0b3IiLCJ2YWx1ZXMiLCJyb290RWxlbWVudCIsImVsZW1lbnRPcmlnaW5hbENoaWxkcmVuIiwiY2xvbmVOb2RlIiwiY29tcHV0ZWQiLCJyZWFjdGl2ZVByb3BzIiwicmVhY3RpdmVQcm9wc0xpc3QiLCJkYXRhIiwic2xvdHMiLCJ0cmltIiwiaW5uZXJUZXh0Iiwic2xvdFZ1ZUVsZW1lbnQiLCJnZXRTbG90cyIsInByb3BzV2l0aERlZmF1bHQiLCJrZXlzIiwiZWxlbWVudElubmVySHRtbCIsImVsIiwic2V0Iiwic2V0QXR0cmlidXRlIiwicHJvcE5hbWUiLCJiZWZvcmVDcmVhdGVWdWVJbnN0YW5jZSIsIl9fdnVlX2N1c3RvbV9lbGVtZW50X3Byb3BzX18iLCJnZXRWdWVJbnN0YW5jZSIsIiRjaGlsZHJlbiIsInNoYWRvd0NzcyIsInN0eWxlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsImluc3RhbGwiLCJpc0FzeW5jQ29tcG9uZW50Iiwib3B0aW9uc1Byb3BzIiwiYXN5bmNDb21wb25lbnRQcm9taXNlIiwiaXNBc3luY0NvbXBvbmVudFByb21pc2UiLCJ0aGVuIiwiRXJyb3IiLCJfX2RldGFjaGVkX18iLCJsYXp5TG9hZGVkQ29tcG9uZW50IiwibGF6eUxvYWRlZENvbXBvbmVudFByb3BzIiwiX3RoaXMyIiwic2V0VGltZW91dCIsIiRkZXN0cm95IiwiZGVzdHJveVRpbWVvdXQiLCJuYW1lQ2FtZWxDYXNlIiwiaW5zdGFsbGVkIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwic2V0SW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwidG9TdHJpbmciLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4IiwiTWF0aCIsInJhbmRvbSIsIm9uR2xvYmFsTWVzc2FnZSIsInNvdXJjZSIsInNsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24iLCJNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24iLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uIiwiY2FsbGJhY2siLCJ0YXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInZhbCIsIlN0cmluZyIsImZsb29yIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvTnVtYmVyIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiYXJyIiwic3BsaWNlIiwiaGFzT3duIiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJjdHgiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXkiLCJpc0FycmF5QiIsImV2ZXJ5Iiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiYmFpbFJFIiwiX2lzU2VydmVyIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJ0ZXN0IiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzQ2hyb21lIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIm93bktleXMiLCJTZXQiLCJoYXMiLCJjbGVhciIsIndhcm4iLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjb25zb2xlIiwiY2xhc3NpZnlSRSIsIm1zZyIsInZtIiwidHJhY2UiLCJlcnJvciIsImluY2x1ZGVGaWxlIiwiY2lkIiwiX2lzVnVlIiwiX2NvbXBvbmVudFRhZyIsImZpbGUiLCJjbGFzc2lmeSIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwibGFzdCIsInJlcGVhdCIsImpvaW4iLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidXBkYXRlIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwiX3RhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2QiLCJvcmlnaW5hbCIsImluc2VydGVkIiwicmVzdWx0Iiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsInNyYyIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUmVhY3RpdmUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiZGVsIiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJkZWZhdWx0U3RyYXQiLCJrZXkkMSIsImluamVjdCIsInByb3ZpZGUiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJtZXJnZU9wdGlvbnMiLCJjb21wb25lbnRzIiwiY2hlY2tDb21wb25lbnRzIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZXh0ZW5kc0Zyb20iLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJ2YWxpZGF0b3IiLCJhc3NlcnRQcm9wIiwic2ltcGxlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJoYW5kbGVFcnJvciIsImVyciIsImluZm8iLCJjdXIiLCJob29rcyIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImxvZ0Vycm9yIiwibWljcm9UaW1lckZ1bmMiLCJtYWNyb1RpbWVyRnVuYyIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIm1hcmsiLCJtZWFzdXJlIiwidXNlTWFjcm9UYXNrIiwicG9ydCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2IiLCJfcmVzb2x2ZSIsImluaXRQcm94eSIsInBlcmYiLCJjbGVhck1hcmtzIiwiY2xlYXJNZWFzdXJlcyIsInN0YXJ0VGFnIiwiZW5kVGFnIiwiYWxsb3dlZEdsb2JhbHMiLCJ3YXJuTm9uUHJlc2VudCIsImhhc1Byb3h5IiwiUHJveHkiLCJpc0J1aWx0SW5Nb2RpZmllciIsImhhc0hhbmRsZXIiLCJpc0FsbG93ZWQiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJfcmVuZGVyUHJveHkiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwib2xkIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiaGFzaCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJpc1RleHROb2RlIiwic2hpZnQiLCJfaXNWTGlzdCIsImlzRmFsc2UiLCJlbnN1cmVDdG9yIiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiJG9uY2UiLCIkb24iLCJyZW1vdmUkMSIsIiRvZmYiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJvbGRMaXN0ZW5lcnMiLCJyZXNvbHZlU2xvdHMiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJhY3RpdmVJbnN0YW5jZSIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsImlzSW5JbmFjdGl2ZVRyZWUiLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiY2FsbEhvb2siLCJqIiwiX2hhc0hvb2tFdmVudCIsIk1BWF9VUERBVEVfQ09VTlQiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwidXNlciIsImV4cHJlc3Npb24iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiX2lzTW91bnRlZCIsImNhbGxVcGRhdGVkSG9va3MiLCJ1aWQkMSIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiZGVlcCIsImxhenkiLCJzeW5jIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsInBhdGgiLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwidG1wIiwicXVldWVXYXRjaGVyIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwicHJveHkiLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJwcm9wc09wdGlvbnMiLCJfcHJvcEtleXMiLCJsb29wIiwiaHlwaGVuYXRlZEtleSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsIiRkYXRhIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJoYW5kbGVyIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCIkd2F0Y2giLCJyZXNvbHZlSW5qZWN0IiwiZmlsdGVyIiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsInNsb3ROb2RlcyIsIiRzbG90cyIsIl9yZW5kZXJlZCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsIm91cnMiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdSIsIl9nIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwiY2xvbmUiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiX3BhcmVudEVsbSIsIl9yZWZFbG0iLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJoYXNDaGlsZHJlbiIsIl9yZW5kZXJDaGlsZHJlbiIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiX2Jhc2UiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsImNvbnRleHRzIiwiZm9yY2VSZW5kZXIiLCJyZWplY3QiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImtleUluTG93ZXJDYXNlIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsInJlbmRlckNvbnRleHQiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJpcyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwiYXBwbHlOUyIsImZvcmNlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0IiwiZXh0ZW5kZWQiLCJleHRlbmRPcHRpb25zIiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsImRlZHVwZSIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIlN1YiIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwiaW5pdFByb3ZpZGUiLCJfbmFtZSIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIm5ld0RhdGEiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCJjYnMiLCJpJDEiLCJsb3dlckNhc2VFdmVudCIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZW5kZXJFcnJvciIsInJlbmRlck1peGluIiwicGF0dGVyblR5cGVzIiwiUmVnRXhwIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwidGhpcyQxIiwiY29uZmlnRGVmIiwiZGVsZXRlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJxdWVyeSIsInNlbGVjdGVkIiwicXVlcnlTZWxlY3RvciIsIm5vZGVPcHMiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwiY2hyIiwiaW5kZXgkMSIsImV4cHJlc3Npb25Qb3MiLCJleHByZXNzaW9uRW5kUG9zIiwid2FybiQxIiwia2xhc3MiLCJ2YWxpZERpdmlzaW9uQ2hhclJFIiwicGFyc2VGaWx0ZXJzIiwiZXhwIiwicHJldiIsImZpbHRlcnMiLCJpblNpbmdsZSIsImluRG91YmxlIiwiaW5UZW1wbGF0ZVN0cmluZyIsImluUmVnZXgiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwibGFzdEZpbHRlckluZGV4IiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJiYXNlV2FybiIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwicGxhaW4iLCJhZGRBdHRyIiwiYWRkUmF3QXR0ciIsImF0dHJzTWFwIiwiYXR0cnNMaXN0IiwiYWRkRGlyZWN0aXZlIiwiYXJnIiwiYWRkSGFuZGxlciIsImltcG9ydGFudCIsImV2ZW50cyIsInByZXZlbnQiLCJyaWdodCIsIm1pZGRsZSIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZW5Db21wb25lbnRNb2RlbCIsIm51bWJlciIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsImxhc3RJbmRleE9mIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsIm5leHQiLCJwYXJzZVN0cmluZyIsInBhcnNlQnJhY2tldCIsInBhcnNlTW9kZWwiLCJpbkJyYWNrZXQiLCJzdHJpbmdRdW90ZSIsInRhcmdldCQxIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImFkZCQxIiwiX3dpdGhUYXNrIiwid2l0aE1hY3JvVGFzayIsIm9uY2VIYW5kbGVyIiwicmVtb3ZlJDIiLCJjcmVhdGVPbmNlSGFuZGxlciIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsInNvbWUiLCJpZ25vcmUiLCJjcmVhdGluZ0VsbUluVlByZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInByZSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImNoZWNrRHVwbGljYXRlS2V5cyIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsImNoaWxkRWxtIiwiY3JlYXRlUm1DYiIsInNlZW5LZXlzIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImh5ZHJhdGlvbkJhaWxlZCIsImlzUmVuZGVyZWRNb2R1bGUiLCJhc3NlcnROb2RlTWF0Y2giLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZpcnN0Q2hpbGQiLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiZW1wdHlOb2RlQXQiLCJvbGRFbG0iLCJwYXJlbnRFbG0kMSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJyYXdDaGlsZCIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJwb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsImtlcHQiLCJyZW1vdmVkIiwiYyQxIiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiSFRNTFVua25vd25FbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwidGVtcGxhdGUiLCJtb3VudENvbXBvbmVudCIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsIm9wZW4iLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VuVmFsdWUiLCJ0b2tlbnMiLCJyYXdUb2tlbnMiLCJleGVjIiwiQGJpbmRpbmciLCJrbGFzcyQxIiwic3RhdGljS2V5cyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwiZGVjb2RlciIsInN0eWxlJDEiLCJzdHlsZUJpbmRpbmciLCJoZSIsImlzVW5hcnlUYWciLCJjYW5CZUxlZnRPcGVuVGFnIiwiaXNOb25QaHJhc2luZ1RhZyIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsIklTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4iLCJpc1BsYWluVGV4dEVsZW1lbnQiLCJyZUNhY2hlIiwiZGVjb2RpbmdNYXAiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiZhbXA7IiwiJiMxMDsiLCImIzk7IiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsInJlIiwid2FybiQyIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJkZWNvZGVIVE1MQ2FjaGVkIiwiY3JlYXRlQVNURWxlbWVudCIsIm1ha2VBdHRyc01hcCIsInBhcnNlIiwiaXNQcmVUYWciLCJyb290IiwiY3VycmVudFBhcmVudCIsInN0YWNrIiwicHJlc2VydmVXaGl0ZXNwYWNlIiwiaW5QcmUiLCJ3YXJuZWQiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsImxhc3RUYWciLCJleHBlY3RIVE1MIiwiaXNVbmFyeVRhZyQkMSIsImNhbkJlTGVmdE9wZW5UYWckJDEiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwiYWxsIiwiY2hhcnMiLCJwYXJzZUVuZFRhZyIsInRleHRFbmQiLCJjb21tZW50RW5kIiwic2hvdWxkS2VlcENvbW1lbnQiLCJzdWJzdHJpbmciLCJhZHZhbmNlIiwiY29uZGl0aW9uYWxFbmQiLCJkb2N0eXBlTWF0Y2giLCJlbmRUYWdNYXRjaCIsImN1ckluZGV4Iiwic3RhcnRUYWdNYXRjaCIsInBhcnNlU3RhcnRUYWciLCJoYW5kbGVTdGFydFRhZyIsInJlc3QiLCJ1bmFyeVNsYXNoIiwidW5hcnkiLCJzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYiLCJsb3dlckNhc2VkVGFnIiwibG93ZXJDYXNlZFRhZ05hbWUiLCJwYXJzZUhUTUwiLCJjb21tZW50cyIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiZ3VhcmRJRVNWR0J1ZyIsImlzRm9yYmlkZGVuVGFnIiwiZm9yYmlkZGVuIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJwcm9jZXNzUHJlIiwicHJvY2Vzc1Jhd0F0dHJzIiwicHJvY2Vzc2VkIiwicHJvY2Vzc0ZvciIsImlmIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsImVsc2UiLCJlbHNlaWYiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsInByb2Nlc3NFbGVtZW50IiwiZmluZFByZXZFbGVtZW50IiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImlzVGV4dFRhZyIsInByb2Nlc3NLZXkiLCJmb3IiLCJjaGVja0luRm9yIiwicHJvY2Vzc1JlZiIsInNsb3ROYW1lIiwicHJvY2Vzc1Nsb3QiLCJwcm9jZXNzQ29tcG9uZW50IiwiaXNQcm9wIiwiaGFzQmluZGluZ3MiLCJwYXJzZU1vZGlmaWVycyIsImNhbWVsIiwiYXJnTWF0Y2giLCJjaGVja0ZvckFsaWFzTW9kZWwiLCJwcm9jZXNzQXR0cnMiLCJpbk1hdGNoIiwiYWxpYXMiLCJpdGVyYXRvck1hdGNoIiwiaXRlcmF0b3IxIiwiaXRlcmF0b3IyIiwicGFyc2VGb3IiLCJjb25kaXRpb24iLCJpZkNvbmRpdGlvbnMiLCJfZWwiLCJjbG9uZUFTVEVsZW1lbnQiLCJtb2R1bGVzJDEiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwidHlwZUJpbmRpbmciLCJpZkNvbmRpdGlvbiIsImlmQ29uZGl0aW9uRXh0cmEiLCJoYXNFbHNlIiwiZWxzZUlmQ29uZGl0aW9uIiwiYnJhbmNoMCIsImJyYW5jaDEiLCJicmFuY2gyIiwiaXNTdGF0aWNLZXkiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJiYXNlT3B0aW9ucyIsIl93YXJuIiwiY29kZSIsImdlblNlbGVjdCIsInZhbHVlQmluZGluZyIsInRydWVWYWx1ZUJpbmRpbmciLCJmYWxzZVZhbHVlQmluZGluZyIsImdlbkNoZWNrYm94TW9kZWwiLCJnZW5SYWRpb01vZGVsIiwidmFsdWUkMSIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwiZ2VuRGVmYXVsdE1vZGVsIiwicmVkdWNlIiwiZ2VuU3RhdGljS2V5cyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsInN0YXRpYyIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwibCQxIiwibWFya1N0YXRpY1Jvb3RzIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290IiwiZm5FeHBSRSIsInNpbXBsZVBhdGhSRSIsImVzYyIsInRhYiIsInNwYWNlIiwidXAiLCJkb3duIiwia2V5TmFtZXMiLCJnZW5HdWFyZCIsIm1vZGlmaWVyQ29kZSIsInN0b3AiLCJjdHJsIiwiYWx0IiwibWV0YSIsImdlbkhhbmRsZXJzIiwiZ2VuSGFuZGxlciIsImlzTWV0aG9kUGF0aCIsImlzRnVuY3Rpb25FeHByZXNzaW9uIiwiZ2VuTW9kaWZpZXJDb2RlIiwia2V5TW9kaWZpZXIiLCJnZW5GaWx0ZXJDb2RlIiwiZ2VuS2V5RmlsdGVyIiwia2V5VmFsIiwia2V5Q29kZSIsImtleU5hbWUiLCJiYXNlRGlyZWN0aXZlcyIsIndyYXBMaXN0ZW5lcnMiLCJ3cmFwRGF0YSIsImNsb2FrIiwiQ29kZWdlblN0YXRlIiwiZGF0YUdlbkZucyIsIm1heWJlQ29tcG9uZW50Iiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJzdGF0ZSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImFsdEdlbiIsImFsdEhlbHBlciIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5DaGlsZHJlbiIsImJpbmQkJDEiLCJnZW5TbG90IiwiY29tcG9uZW50TmFtZSIsImdlbkRhdGEkMiIsImdlbkNvbXBvbmVudCIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJnZW5EaXJlY3RpdmVzIiwiZ2VuUHJvcHMiLCJnZW5TY29wZWRTbG90IiwiZ2VuU2NvcGVkU2xvdHMiLCJpbmxpbmVSZW5kZXJGbnMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsImdlbkZvclNjb3BlZFNsb3QiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJuZWVkc05vcm1hbGl6YXRpb24iLCJnZXROb3JtYWxpemF0aW9uVHlwZSIsImdlbk5vZGUiLCJnZW5Db21tZW50IiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwiZ2VuVGV4dCIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJ1bmFyeU9wZXJhdG9yc1JFIiwic3RyaXBTdHJpbmdSRSIsImRldGVjdEVycm9ycyIsImVycm9ycyIsImNoZWNrTm9kZSIsImNoZWNrRm9yIiwiY2hlY2tFdmVudCIsImNoZWNrRXhwcmVzc2lvbiIsInN0aXBwZWQiLCJrZXl3b3JkTWF0Y2giLCJjaGVja0lkZW50aWZpZXIiLCJpZGVudCIsIm1lc3NhZ2UiLCJjcmVhdGVGdW5jdGlvbiIsImRpdiIsImNvbXBpbGVUb0Z1bmN0aW9ucyIsImJhc2VDb21waWxlIiwiY29tcGlsZSIsImZpbmFsT3B0aW9ucyIsInRpcHMiLCJjb21waWxlZCIsIndhcm4kJDEiLCJmbkdlbkVycm9ycyIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjcmVhdGVDb21waWxlckNyZWF0b3IiLCJjcmVhdGVDb21waWxlciIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50Iiwib3V0ZXJIVE1MIiwiY29udGFpbmVyIiwiZ2V0T3V0ZXJIVE1MIiwiX2xpc3RUb1N0eWxlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2xpc3RUb1N0eWxlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJoYXNEb2N1bWVudCIsIkRFQlVHIiwic3R5bGVzSW5Eb20iLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzaW5nbGV0b25FbGVtZW50Iiwic2luZ2xldG9uQ291bnRlciIsImlzUHJvZHVjdGlvbiIsInNzcklkS2V5IiwiaXNPbGRJRSIsImFkZFN0eWxlc0NsaWVudCIsIl9pc1Byb2R1Y3Rpb24iLCJfb3B0aW9ucyIsImFkZFN0eWxlc1RvRG9tIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsImRvbVN0eWxlIiwiYWRkU3R5bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInNzcklkIiwic291cmNlcyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0eWxlU2hlZXQiLCJuZXdPYmoiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50IiwiY3NzTm9kZSIsInVzZVNvdXJjZU1hcCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJsb2NhbHMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFB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UUFBQTVOLEVBQUFDLEVBQUEyTixFQUFBLE1BQ0FBLEVBQUE2a0QsU0FBQXp5RCxFQUFBRCxRQUFBNk4sRUFBQTZrRCxTQUdBcHNELEVBREF4RyxFQUFBLEdBQUE2RCxTQUNBLFdBQUFrSyxHQUFBIiwiZmlsZSI6ImhlbGxvLWNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiPHRlbXBsYXRlPlxyXG5cclxuICA8ZGl2IGlkPVwic2hhcmUtYnV0dG9uc1wiPlxyXG4gICAgIDxoMT4gQW0gYSBWdWUgQ29tcG9uZW50PC9oMT4gXHJcbiAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwic2hhcmVcIiB2LWlmPVwiZmFjZWJvb2tcIj5GYWNlYm9vazwvYT5cclxuICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJzaGFyZVwiIHYtaWY9XCJ0d2l0dGVyXCI+VHdpdHRlcjwvYT5cclxuICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJzaGFyZVwiIHYtaWY9XCJncGx1c1wiPkdvb2dsZSs8L2E+XHJcbiAgXHJcbiAgPC9kaXY+XHJcblxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHByb3BzOiB7XHJcbiAgICBmYWNlYm9vazogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0sXHJcbiAgICB0d2l0dGVyOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSxcclxuICAgIGdwbHVzOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfVxyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgc2hhcmUgKCRldmVudCkge1xyXG4gICAgICB3aW5kb3cuYWxlcnQoJ1NoYXJlIG9uICcgKyAkZXZlbnQudGFyZ2V0LmlubmVySFRNTCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAjc2hhcmUtYnV0dG9ucyBhIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgY29sb3I6ICM5OTk7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBoZWlnaHQ6IDMwMHB4O1xyXG4gIH1cclxuICAjc2hhcmUtYnV0dG9ucyBhOmhvdmVyIHtcclxuICAgIGNvbG9yOiAjMzMzO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjODg4O1xyXG4gIH1cclxuPC9zdHlsZT4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwic2hhcmUtYnV0dG9uc1wiIH0gfSwgW1xuICAgIF9jKFwiaDFcIiwgW192bS5fdihcIiBBbSBhIFZ1ZSBDb21wb25lbnRcIildKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5mYWNlYm9va1xuICAgICAgPyBfYyhcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaGFyZSgkZXZlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJGYWNlYm9va1wiKV1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS50d2l0dGVyXG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNoYXJlKCRldmVudClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW192bS5fdihcIlR3aXR0ZXJcIildXG4gICAgICAgIClcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uZ3BsdXNcbiAgICAgID8gX2MoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hhcmUoJGV2ZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiR29vZ2xlK1wiKV1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtNWRlNjU1ZjJcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtbG9hZGVyL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVkZTY1NWYyXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vSGVsbG8udnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0hlbGxvLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSGVsbG8udnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTVkZTY1NWYyXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSGVsbG8udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTVkZTY1NWYyXCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjXFxcXGNvbXBvbmVudHNcXFxcSGVsbG8udnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTVkZTY1NWYyXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNWRlNjU1ZjJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgc2NyaXB0RXhwb3J0cyA9IHNjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCJcclxuaW1wb3J0IEhlbGxvIGZyb20gJy4vY29tcG9uZW50cy9IZWxsby52dWUnO1xyXG4vL2ltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5jb25zdCBWdWUgPSByZXF1aXJlKCd2dWUnKVxyXG4vLyBpbmNsdWRlIHZ1ZS1jdXN0b20tZWxlbWVudCBwbHVnaW4gdG8gVnVlXHJcbi8vaW1wb3J0IFZ1ZUN1c3RvbUVsZW1lbnQgZnJvbSAndnVlLWN1c3RvbS1lbGVtZW50J1xyXG5jb25zdCBWdWVDdXN0b21FbGVtZW50ID0gcmVxdWlyZSgndnVlLWN1c3RvbS1lbGVtZW50L2Rpc3QvdnVlLWN1c3RvbS1lbGVtZW50Jyk7XHJcblZ1ZS51c2UoVnVlQ3VzdG9tRWxlbWVudCk7XHJcblxyXG4vLyBpbXBvcnQgYW5kIHJlZ2lzdGVyIHlvdXIgY29tcG9uZW50KHMpXHJcblxyXG4vL2NvbnN0IEhlbGxvID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0hlbGxvJylcclxuXHJcblZ1ZS5jdXN0b21FbGVtZW50KCdteS1oZWxsby1jb21wJywgSGVsbG8pO1xyXG4iLCIvKipcbiAgKiB2dWUtY3VzdG9tLWVsZW1lbnQgdjMuMi4xXG4gICogKGMpIDIwMTggS2Fyb2wgRmFiamHFhGN6dWtcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5WdWVDdXN0b21FbGVtZW50ID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVTNiBPYmplY3QuZ2V0UHJvdG90eXBlT2YgUG9seWZpbGxcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9zZXRQcm90b3R5cGVPZlxuICovXG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBzZXRQcm90b3R5cGVPZjtcblxuZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqLCBwcm90bykge1xuICBvYmouX19wcm90b19fID0gcHJvdG87XG4gIHJldHVybiBvYmo7XG59XG5cbnZhciBzZXRQcm90b3R5cGVPZl8xID0gc2V0UHJvdG90eXBlT2YuYmluZChPYmplY3QpO1xuXG5mdW5jdGlvbiBpc0VTMjAxNSgpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgaXNFUzIwMTUkMSA9IGlzRVMyMDE1KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX0N1c3RvbUVsZW1lbnQoKSB7XG4gIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChIVE1MRWxlbWVudCwgW10sIHRoaXMuX19wcm90b19fLmNvbnN0cnVjdG9yKTtcbn1cblxuXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoX0N1c3RvbUVsZW1lbnQucHJvdG90eXBlLCBIVE1MRWxlbWVudC5wcm90b3R5cGUpO1xuT2JqZWN0LnNldFByb3RvdHlwZU9mKF9DdXN0b21FbGVtZW50LCBIVE1MRWxlbWVudCk7XG5mdW5jdGlvbiByZWdpc3RlckN1c3RvbUVsZW1lbnQodGFnKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAodHlwZW9mIGN1c3RvbUVsZW1lbnRzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdG9yQ2FsbGJhY2soKSB7XG4gICAgaWYgKG9wdGlvbnMuc2hhZG93ID09PSB0cnVlICYmIEhUTUxFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3cpIHtcbiAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIH1cbiAgICB0eXBlb2Ygb3B0aW9ucy5jb25zdHJ1Y3RvckNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuY29uc3RydWN0b3JDYWxsYmFjay5jYWxsKHRoaXMpO1xuICB9XG4gIGZ1bmN0aW9uIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHR5cGVvZiBvcHRpb25zLmNvbm5lY3RlZENhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuY29ubmVjdGVkQ2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHR5cGVvZiBvcHRpb25zLmRpc2Nvbm5lY3RlZENhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuZGlzY29ubmVjdGVkQ2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpIHtcbiAgICB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICB9XG5cbiAgaWYgKGlzRVMyMDE1JDEpIHtcbiAgICB2YXIgQ3VzdG9tRWxlbWVudCA9IGZ1bmN0aW9uIChfQ3VzdG9tRWxlbWVudDIpIHtcbiAgICAgIF9pbmhlcml0cyhDdXN0b21FbGVtZW50LCBfQ3VzdG9tRWxlbWVudDIpO1xuXG4gICAgICBmdW5jdGlvbiBDdXN0b21FbGVtZW50KHNlbGYpIHtcbiAgICAgICAgdmFyIF9yZXQ7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEN1c3RvbUVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDdXN0b21FbGVtZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ3VzdG9tRWxlbWVudCkpLmNhbGwodGhpcykpO1xuXG4gICAgICAgIHZhciBtZSA9IHNlbGYgPyBIVE1MRWxlbWVudC5jYWxsKHNlbGYpIDogX3RoaXM7XG5cbiAgICAgICAgY29uc3RydWN0b3JDYWxsYmFjay5jYWxsKG1lKTtcbiAgICAgICAgcmV0dXJuIF9yZXQgPSBtZSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoQ3VzdG9tRWxlbWVudCwgbnVsbCwgW3tcbiAgICAgICAga2V5OiAnb2JzZXJ2ZWRBdHRyaWJ1dGVzJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMub2JzZXJ2ZWRBdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBDdXN0b21FbGVtZW50O1xuICAgIH0oX0N1c3RvbUVsZW1lbnQpO1xuXG4gICAgQ3VzdG9tRWxlbWVudC5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2sgPSBjb25uZWN0ZWRDYWxsYmFjaztcbiAgICBDdXN0b21FbGVtZW50LnByb3RvdHlwZS5kaXNjb25uZWN0ZWRDYWxsYmFjayA9IGRpc2Nvbm5lY3RlZENhbGxiYWNrO1xuICAgIEN1c3RvbUVsZW1lbnQucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayA9IGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaztcblxuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWcsIEN1c3RvbUVsZW1lbnQpO1xuICAgIHJldHVybiBDdXN0b21FbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHZhciBfQ3VzdG9tRWxlbWVudDMgPSBmdW5jdGlvbiBfQ3VzdG9tRWxlbWVudDMoc2VsZikge1xuICAgICAgdmFyIG1lID0gc2VsZiA/IEhUTUxFbGVtZW50LmNhbGwoc2VsZikgOiB0aGlzO1xuXG4gICAgICBjb25zdHJ1Y3RvckNhbGxiYWNrLmNhbGwobWUpO1xuICAgICAgcmV0dXJuIG1lO1xuICAgIH07XG5cbiAgICBfQ3VzdG9tRWxlbWVudDMub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gb3B0aW9ucy5vYnNlcnZlZEF0dHJpYnV0ZXMgfHwgW107XG5cbiAgICBfQ3VzdG9tRWxlbWVudDMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShIVE1MRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBfQ3VzdG9tRWxlbWVudDNcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9DdXN0b21FbGVtZW50My5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2sgPSBjb25uZWN0ZWRDYWxsYmFjaztcbiAgICBfQ3VzdG9tRWxlbWVudDMucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrID0gZGlzY29ubmVjdGVkQ2FsbGJhY2s7XG4gICAgX0N1c3RvbUVsZW1lbnQzLnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgPSBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s7XG5cbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUodGFnLCBfQ3VzdG9tRWxlbWVudDMpO1xuICAgIHJldHVybiBfQ3VzdG9tRWxlbWVudDM7XG4gIH1cbn1cblxudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBmdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7XG4gICAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbiAgfSk7XG59O1xudmFyIGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykucmVwbGFjZShoeXBoZW5hdGVSRSwgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCkge1xuICB2YXIgc3RhcnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gY29udmVydEF0dHJpYnV0ZVZhbHVlKHZhbHVlLCBvdmVycmlkZVR5cGUpIHtcbiAgdmFyIHByb3BzVmFsdWUgPSB2YWx1ZTtcbiAgdmFyIGlzQm9vbGVhbiA9IFsndHJ1ZScsICdmYWxzZSddLmluZGV4T2YodmFsdWUpID4gLTE7XG4gIHZhciB2YWx1ZVBhcnNlZCA9IHBhcnNlRmxvYXQocHJvcHNWYWx1ZSwgMTApO1xuICB2YXIgaXNOdW1iZXIgPSAhaXNOYU4odmFsdWVQYXJzZWQpICYmIGlzRmluaXRlKHByb3BzVmFsdWUpICYmIHR5cGVvZiBwcm9wc1ZhbHVlID09PSAnc3RyaW5nJyAmJiAhcHJvcHNWYWx1ZS5tYXRjaCgvXjArW14uXVxcZCokL2cpO1xuXG4gIGlmIChvdmVycmlkZVR5cGUgJiYgb3ZlcnJpZGVUeXBlICE9PSBCb29sZWFuKSB7XG4gICAgcHJvcHNWYWx1ZSA9IG92ZXJyaWRlVHlwZSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuIHx8IG92ZXJyaWRlVHlwZSA9PT0gQm9vbGVhbikge1xuICAgIHByb3BzVmFsdWUgPSBwcm9wc1ZhbHVlID09PSAndHJ1ZSc7XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIpIHtcbiAgICBwcm9wc1ZhbHVlID0gdmFsdWVQYXJzZWQ7XG4gIH1cblxuICByZXR1cm4gcHJvcHNWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzKGNvbGxlY3Rpb24sIHByb3BzKSB7XG4gIGlmIChjb2xsZWN0aW9uICYmIGNvbGxlY3Rpb24ubGVuZ3RoKSB7XG4gICAgY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICB2YXIgY2FtZWxDYXNlUHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICAgICAgcHJvcHMuY2FtZWxDYXNlLmluZGV4T2YoY2FtZWxDYXNlUHJvcCkgPT09IC0xICYmIHByb3BzLmNhbWVsQ2FzZS5wdXNoKGNhbWVsQ2FzZVByb3ApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGNvbGxlY3Rpb24gJiYgKHR5cGVvZiBjb2xsZWN0aW9uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb2xsZWN0aW9uKSkgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgY2FtZWxDYXNlUHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICAgICAgcHJvcHMuY2FtZWxDYXNlLmluZGV4T2YoY2FtZWxDYXNlUHJvcCkgPT09IC0xICYmIHByb3BzLmNhbWVsQ2FzZS5wdXNoKGNhbWVsQ2FzZVByb3ApO1xuXG4gICAgICBpZiAoY29sbGVjdGlvbltjYW1lbENhc2VQcm9wXSAmJiBjb2xsZWN0aW9uW2NhbWVsQ2FzZVByb3BdLnR5cGUpIHtcbiAgICAgICAgcHJvcHMudHlwZXNbcHJvcF0gPSBbXS5jb25jYXQoY29sbGVjdGlvbltjYW1lbENhc2VQcm9wXS50eXBlKVswXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UHJvcHMoKSB7XG4gIHZhciBjb21wb25lbnREZWZpbml0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgcHJvcHMgPSB7XG4gICAgY2FtZWxDYXNlOiBbXSxcbiAgICBoeXBoZW5hdGU6IFtdLFxuICAgIHR5cGVzOiB7fVxuICB9O1xuXG4gIGlmIChjb21wb25lbnREZWZpbml0aW9uLm1peGlucykge1xuICAgIGNvbXBvbmVudERlZmluaXRpb24ubWl4aW5zLmZvckVhY2goZnVuY3Rpb24gKG1peGluKSB7XG4gICAgICBleHRyYWN0UHJvcHMobWl4aW4ucHJvcHMsIHByb3BzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChjb21wb25lbnREZWZpbml0aW9uLmV4dGVuZHMgJiYgY29tcG9uZW50RGVmaW5pdGlvbi5leHRlbmRzLnByb3BzKSB7XG4gICAgdmFyIHBhcmVudFByb3BzID0gY29tcG9uZW50RGVmaW5pdGlvbi5leHRlbmRzLnByb3BzO1xuXG5cbiAgICBleHRyYWN0UHJvcHMocGFyZW50UHJvcHMsIHByb3BzKTtcbiAgfVxuXG4gIGV4dHJhY3RQcm9wcyhjb21wb25lbnREZWZpbml0aW9uLnByb3BzLCBwcm9wcyk7XG5cbiAgcHJvcHMuY2FtZWxDYXNlLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBwcm9wcy5oeXBoZW5hdGUucHVzaChoeXBoZW5hdGUocHJvcCkpO1xuICB9KTtcblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmZ1bmN0aW9uIHJlYWN0aXZlUHJvcHMoZWxlbWVudCwgcHJvcHMpIHtcbiAgcHJvcHMuY2FtZWxDYXNlLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsIG5hbWUsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX3Z1ZV9jdXN0b21fZWxlbWVudF9fW25hbWVdO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmICgoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSAmJiB0aGlzLl9fdnVlX2N1c3RvbV9lbGVtZW50X18pIHtcbiAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wcy5jYW1lbENhc2VbaW5kZXhdO1xuICAgICAgICAgIHRoaXMuX192dWVfY3VzdG9tX2VsZW1lbnRfX1twcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IHByb3BzLnR5cGVzW3Byb3BzLmNhbWVsQ2FzZVtpbmRleF1dO1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKHByb3BzLmh5cGhlbmF0ZVtpbmRleF0sIGNvbnZlcnRBdHRyaWJ1dGVWYWx1ZSh2YWx1ZSwgdHlwZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wc0RhdGEoZWxlbWVudCwgY29tcG9uZW50RGVmaW5pdGlvbiwgcHJvcHMpIHtcbiAgdmFyIHByb3BzRGF0YSA9IGNvbXBvbmVudERlZmluaXRpb24ucHJvcHNEYXRhIHx8IHt9O1xuXG4gIHByb3BzLmh5cGhlbmF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICAgIHZhciBwcm9wQ2FtZWxDYXNlID0gcHJvcHMuY2FtZWxDYXNlW2luZGV4XTtcbiAgICB2YXIgcHJvcFZhbHVlID0gZWxlbWVudC5hdHRyaWJ1dGVzW25hbWVdIHx8IGVsZW1lbnRbcHJvcENhbWVsQ2FzZV07XG5cbiAgICB2YXIgdHlwZSA9IG51bGw7XG4gICAgaWYgKHByb3BzLnR5cGVzW3Byb3BDYW1lbENhc2VdKSB7XG4gICAgICB0eXBlID0gcHJvcHMudHlwZXNbcHJvcENhbWVsQ2FzZV07XG4gICAgfVxuXG4gICAgcHJvcHNEYXRhW3Byb3BDYW1lbENhc2VdID0gcHJvcFZhbHVlIGluc3RhbmNlb2YgQXR0ciA/IGNvbnZlcnRBdHRyaWJ1dGVWYWx1ZShwcm9wVmFsdWUudmFsdWUsIHR5cGUpIDogcHJvcFZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcHJvcHNEYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVzKGNoaWxkcmVuKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG5cbiAgdG9BcnJheShjaGlsZHJlbi5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5ub2RlTmFtZSA9PT0gJ3Z1ZS1zbG90JyA/ICdzbG90JyA6IGF0dHJpYnV0ZS5ub2RlTmFtZV0gPSBhdHRyaWJ1dGUubm9kZVZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gYXR0cmlidXRlcztcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGROb2RlcyhlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoKSByZXR1cm4gZWxlbWVudC5jaGlsZE5vZGVzO1xuICBpZiAoZWxlbWVudC5jb250ZW50ICYmIGVsZW1lbnQuY29udGVudC5jaGlsZE5vZGVzICYmIGVsZW1lbnQuY29udGVudC5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBlbGVtZW50LmNvbnRlbnQuY2hpbGROb2RlcztcbiAgfVxuXG4gIHZhciBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuXG4gIHJldHVybiBwbGFjZWhvbGRlci5jaGlsZE5vZGVzO1xufVxuXG5mdW5jdGlvbiB0ZW1wbGF0ZUVsZW1lbnQoY3JlYXRlRWxlbWVudCwgZWxlbWVudCwgZWxlbWVudE9wdGlvbnMpIHtcbiAgdmFyIHRlbXBsYXRlQ2hpbGRyZW4gPSBnZXRDaGlsZE5vZGVzKGVsZW1lbnQpO1xuXG4gIHZhciB2dWVUZW1wbGF0ZUNoaWxkcmVuID0gdG9BcnJheSh0ZW1wbGF0ZUNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLm5vZGVOYW1lID09PSAnI3RleHQnKSByZXR1cm4gY2hpbGQubm9kZVZhbHVlO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY2hpbGQudGFnTmFtZSwge1xuICAgICAgYXR0cnM6IGdldEF0dHJpYnV0ZXMoY2hpbGQpLFxuICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgaW5uZXJIVE1MOiBjaGlsZC5pbm5lckhUTUxcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZWxlbWVudE9wdGlvbnMuc2xvdCA9IGVsZW1lbnQuaWQ7XG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgZWxlbWVudE9wdGlvbnMsIHZ1ZVRlbXBsYXRlQ2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBnZXRTbG90cygpIHtcbiAgdmFyIGNoaWxkcmVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIGNyZWF0ZUVsZW1lbnQgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHNsb3RzID0gW107XG4gIHRvQXJyYXkoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLm5vZGVOYW1lID09PSAnI3RleHQnKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVZhbHVlLnRyaW0oKSkge1xuICAgICAgICBzbG90cy5wdXNoKGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBjaGlsZC5ub2RlVmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoaWxkLm5vZGVOYW1lICE9PSAnI2NvbW1lbnQnKSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IGdldEF0dHJpYnV0ZXMoY2hpbGQpO1xuICAgICAgdmFyIGVsZW1lbnRPcHRpb25zID0ge1xuICAgICAgICBhdHRyczogYXR0cmlidXRlcyxcbiAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICBpbm5lckhUTUw6IGNoaWxkLmlubmVySFRNTCA9PT0gJycgPyBjaGlsZC5pbm5lclRleHQgOiBjaGlsZC5pbm5lckhUTUxcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGF0dHJpYnV0ZXMuc2xvdCkge1xuICAgICAgICBlbGVtZW50T3B0aW9ucy5zbG90ID0gYXR0cmlidXRlcy5zbG90O1xuICAgICAgICBhdHRyaWJ1dGVzLnNsb3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBzbG90VnVlRWxlbWVudCA9IGNoaWxkLnRhZ05hbWUgPT09ICdURU1QTEFURScgPyB0ZW1wbGF0ZUVsZW1lbnQoY3JlYXRlRWxlbWVudCwgY2hpbGQsIGVsZW1lbnRPcHRpb25zKSA6IGNyZWF0ZUVsZW1lbnQoY2hpbGQudGFnTmFtZSwgZWxlbWVudE9wdGlvbnMpO1xuXG4gICAgICBzbG90cy5wdXNoKHNsb3RWdWVFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzbG90cztcbn1cblxuZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnROYW1lLCBkZXRhaWwpIHtcbiAgdmFyIHBhcmFtcyA9IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IGRldGFpbCB9O1xuICB2YXIgZXZlbnQgPSB2b2lkIDA7XG4gIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgfVxuICByZXR1cm4gZXZlbnQ7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUVtaXQoZWxlbWVudCwgZXZlbnROYW1lKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gY3VzdG9tRXZlbnQoZXZlbnROYW1lLCBbXS5jb25jYXQoYXJncykpO1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWdWVJbnN0YW5jZShlbGVtZW50LCBWdWUsIGNvbXBvbmVudERlZmluaXRpb24sIHByb3BzLCBvcHRpb25zKSB7XG4gIGlmICghZWxlbWVudC5fX3Z1ZV9jdXN0b21fZWxlbWVudF9fKSB7XG4gICAgdmFyIGJlZm9yZUNyZWF0ZSA9IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSgpIHtcbiAgICAgIHRoaXMuJGVtaXQgPSBmdW5jdGlvbiBlbWl0KCkge1xuICAgICAgICB2YXIgX3Byb3RvX18kJGVtaXQ7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VzdG9tRW1pdC5hcHBseSh1bmRlZmluZWQsIFtlbGVtZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB0aGlzLl9fcHJvdG9fXyAmJiAoX3Byb3RvX18kJGVtaXQgPSB0aGlzLl9fcHJvdG9fXy4kZW1pdCkuY2FsbC5hcHBseShfcHJvdG9fXyQkZW1pdCwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgQ29tcG9uZW50RGVmaW5pdGlvbiA9IFZ1ZS51dGlsLmV4dGVuZCh7fSwgY29tcG9uZW50RGVmaW5pdGlvbik7XG4gICAgdmFyIHByb3BzRGF0YSA9IGdldFByb3BzRGF0YShlbGVtZW50LCBDb21wb25lbnREZWZpbml0aW9uLCBwcm9wcyk7XG4gICAgdmFyIHZ1ZVZlcnNpb24gPSBWdWUudmVyc2lvbiAmJiBwYXJzZUludChWdWUudmVyc2lvbi5zcGxpdCgnLicpWzBdLCAxMCkgfHwgMDtcblxuICAgIENvbXBvbmVudERlZmluaXRpb24uYmVmb3JlQ3JlYXRlID0gW10uY29uY2F0KENvbXBvbmVudERlZmluaXRpb24uYmVmb3JlQ3JlYXRlIHx8IFtdLCBiZWZvcmVDcmVhdGUpO1xuXG4gICAgaWYgKENvbXBvbmVudERlZmluaXRpb24uX2NvbXBpbGVkKSB7XG4gICAgICB2YXIgY3Rvck9wdGlvbnMgPSB7fTtcbiAgICAgIGlmIChDb21wb25lbnREZWZpbml0aW9uLl9DdG9yKSB7XG4gICAgICAgIGN0b3JPcHRpb25zID0gT2JqZWN0LnZhbHVlcyhDb21wb25lbnREZWZpbml0aW9uLl9DdG9yKVswXS5vcHRpb25zO1xuICAgICAgfVxuICAgICAgY3Rvck9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gQ29tcG9uZW50RGVmaW5pdGlvbi5iZWZvcmVDcmVhdGU7XG4gICAgfVxuXG4gICAgdmFyIHJvb3RFbGVtZW50ID0gdm9pZCAwO1xuXG4gICAgaWYgKHZ1ZVZlcnNpb24gPj0gMikge1xuICAgICAgdmFyIGVsZW1lbnRPcmlnaW5hbENoaWxkcmVuID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkuY2hpbGROb2RlcztcbiAgICAgIHJvb3RFbGVtZW50ID0ge1xuICAgICAgICBwcm9wc0RhdGE6IHByb3BzRGF0YSxcbiAgICAgICAgcHJvcHM6IHByb3BzLmNhbWVsQ2FzZSxcbiAgICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgICByZWFjdGl2ZVByb3BzOiBmdW5jdGlvbiByZWFjdGl2ZVByb3BzJCQxKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHJlYWN0aXZlUHJvcHNMaXN0ID0ge307XG4gICAgICAgICAgICBwcm9wcy5jYW1lbENhc2UuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICByZWFjdGl2ZVByb3BzTGlzdFtwcm9wXSA9IF90aGlzW3Byb3BdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZWFjdGl2ZVByb3BzTGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIHByb3BzOiB0aGlzLnJlYWN0aXZlUHJvcHNcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50RGVmaW5pdGlvbiwgZGF0YSwgZ2V0U2xvdHMoZWxlbWVudE9yaWdpbmFsQ2hpbGRyZW4sIGNyZWF0ZUVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHZ1ZVZlcnNpb24gPT09IDEpIHtcbiAgICAgIHJvb3RFbGVtZW50ID0gQ29tcG9uZW50RGVmaW5pdGlvbjtcbiAgICAgIHJvb3RFbGVtZW50LnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsZW1lbnQgPSBDb21wb25lbnREZWZpbml0aW9uO1xuICAgICAgdmFyIHByb3BzV2l0aERlZmF1bHQgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHByb3BzRGF0YSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBwcm9wc1dpdGhEZWZhdWx0W3Byb3BdID0geyBkZWZhdWx0OiBwcm9wc0RhdGFbcHJvcF0gfTtcbiAgICAgIH0pO1xuICAgICAgcm9vdEVsZW1lbnQucHJvcHMgPSBwcm9wc1dpdGhEZWZhdWx0O1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50SW5uZXJIdG1sID0gdnVlVmVyc2lvbiA+PSAyID8gJzxkaXY+PC9kaXY+JyA6ICgnPGRpdj4nICsgZWxlbWVudC5pbm5lckhUTUwgKyAnPC9kaXY+JykucmVwbGFjZSgvdnVlLXNsb3Q9L2csICdzbG90PScpO1xuICAgIGlmIChvcHRpb25zLnNoYWRvdyAmJiBlbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgIGVsZW1lbnQuc2hhZG93Um9vdC5pbm5lckhUTUwgPSBlbGVtZW50SW5uZXJIdG1sO1xuICAgICAgcm9vdEVsZW1lbnQuZWwgPSBlbGVtZW50LnNoYWRvd1Jvb3QuY2hpbGRyZW5bMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudElubmVySHRtbDtcbiAgICAgIHJvb3RFbGVtZW50LmVsID0gZWxlbWVudC5jaGlsZHJlblswXTtcbiAgICB9XG5cbiAgICByZWFjdGl2ZVByb3BzKGVsZW1lbnQsIHByb3BzKTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5iZWZvcmVDcmVhdGVWdWVJbnN0YW5jZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcm9vdEVsZW1lbnQgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVZ1ZUluc3RhbmNlKHJvb3RFbGVtZW50KSB8fCByb290RWxlbWVudDtcbiAgICB9XG5cbiAgICBlbGVtZW50Ll9fdnVlX2N1c3RvbV9lbGVtZW50X18gPSBuZXcgVnVlKHJvb3RFbGVtZW50KTtcbiAgICBlbGVtZW50Ll9fdnVlX2N1c3RvbV9lbGVtZW50X3Byb3BzX18gPSBwcm9wcztcbiAgICBlbGVtZW50LmdldFZ1ZUluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuX192dWVfY3VzdG9tX2VsZW1lbnRfXy4kY2hpbGRyZW5bMF07XG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLnNoYWRvdyAmJiBvcHRpb25zLnNoYWRvd0NzcyAmJiBlbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG9wdGlvbnMuc2hhZG93Q3NzKSk7XG5cbiAgICAgIGVsZW1lbnQuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd2Y2UtY2xvYWsnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndmNlLXJlYWR5JywgJycpO1xuICAgIGN1c3RvbUVtaXQoZWxlbWVudCwgJ3ZjZS1yZWFkeScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gIFZ1ZS5jdXN0b21FbGVtZW50ID0gZnVuY3Rpb24gdnVlQ3VzdG9tRWxlbWVudCh0YWcsIGNvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICB2YXIgaXNBc3luY0NvbXBvbmVudCA9IHR5cGVvZiBjb21wb25lbnREZWZpbml0aW9uID09PSAnZnVuY3Rpb24nO1xuICAgIHZhciBvcHRpb25zUHJvcHMgPSBpc0FzeW5jQ29tcG9uZW50ICYmIHsgcHJvcHM6IG9wdGlvbnMucHJvcHMgfHwgW10gfTtcbiAgICB2YXIgcHJvcHMgPSBnZXRQcm9wcyhpc0FzeW5jQ29tcG9uZW50ID8gb3B0aW9uc1Byb3BzIDogY29tcG9uZW50RGVmaW5pdGlvbik7XG5cbiAgICB2YXIgQ3VzdG9tRWxlbWVudCA9IHJlZ2lzdGVyQ3VzdG9tRWxlbWVudCh0YWcsIHtcbiAgICAgIGNvbnN0cnVjdG9yQ2FsbGJhY2s6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yQ2FsbGJhY2soKSB7XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNvbnN0cnVjdG9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5jb25zdHJ1Y3RvckNhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgY29ubmVjdGVkQ2FsbGJhY2s6IGZ1bmN0aW9uIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBhc3luY0NvbXBvbmVudFByb21pc2UgPSBpc0FzeW5jQ29tcG9uZW50ICYmIGNvbXBvbmVudERlZmluaXRpb24oKTtcbiAgICAgICAgdmFyIGlzQXN5bmNDb21wb25lbnRQcm9taXNlID0gYXN5bmNDb21wb25lbnRQcm9taXNlICYmIGFzeW5jQ29tcG9uZW50UHJvbWlzZS50aGVuICYmIHR5cGVvZiBhc3luY0NvbXBvbmVudFByb21pc2UudGhlbiA9PT0gJ2Z1bmN0aW9uJztcblxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5jb25uZWN0ZWRDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zLmNvbm5lY3RlZENhbGxiYWNrLmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKGlzQXN5bmNDb21wb25lbnQgJiYgIWlzQXN5bmNDb21wb25lbnRQcm9taXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBc3luYyBjb21wb25lbnQgJyArIHRhZyArICcgZG8gbm90IHJldHVybnMgUHJvbWlzZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fX2RldGFjaGVkX18pIHtcbiAgICAgICAgICBpZiAoaXNBc3luY0NvbXBvbmVudFByb21pc2UpIHtcbiAgICAgICAgICAgIGFzeW5jQ29tcG9uZW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChsYXp5TG9hZGVkQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgIHZhciBsYXp5TG9hZGVkQ29tcG9uZW50UHJvcHMgPSBnZXRQcm9wcyhsYXp5TG9hZGVkQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgY3JlYXRlVnVlSW5zdGFuY2UoX3RoaXMsIFZ1ZSwgbGF6eUxvYWRlZENvbXBvbmVudCwgbGF6eUxvYWRlZENvbXBvbmVudFByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdGVWdWVJbnN0YW5jZSh0aGlzLCBWdWUsIGNvbXBvbmVudERlZmluaXRpb24sIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9fZGV0YWNoZWRfXyA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrOiBmdW5jdGlvbiBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fX2RldGFjaGVkX18gPSB0cnVlO1xuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5kaXNjb25uZWN0ZWRDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zLmRpc2Nvbm5lY3RlZENhbGxiYWNrLmNhbGwodGhpcyk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5fX2RldGFjaGVkX18gJiYgX3RoaXMyLl9fdnVlX2N1c3RvbV9lbGVtZW50X18pIHtcbiAgICAgICAgICAgIF90aGlzMi5fX3Z1ZV9jdXN0b21fZWxlbWVudF9fLiRkZXN0cm95KHRydWUpO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5fX3Z1ZV9jdXN0b21fZWxlbWVudF9fO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5fX3Z1ZV9jdXN0b21fZWxlbWVudF9wcm9wc19fO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucy5kZXN0cm95VGltZW91dCB8fCAzMDAwKTtcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s6IGZ1bmN0aW9uIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX192dWVfY3VzdG9tX2VsZW1lbnRfXyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFyIG5hbWVDYW1lbENhc2UgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suY2FsbCh0aGlzLCBuYW1lLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5fX3Z1ZV9jdXN0b21fZWxlbWVudF9wcm9wc19fLnR5cGVzW25hbWVDYW1lbENhc2VdO1xuICAgICAgICAgIHRoaXMuX192dWVfY3VzdG9tX2VsZW1lbnRfX1tuYW1lQ2FtZWxDYXNlXSA9IGNvbnZlcnRBdHRyaWJ1dGVWYWx1ZSh2YWx1ZSwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgb2JzZXJ2ZWRBdHRyaWJ1dGVzOiBwcm9wcy5oeXBoZW5hdGUsXG5cbiAgICAgIHNoYWRvdzogISFvcHRpb25zLnNoYWRvdyAmJiAhIUhUTUxFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3dcbiAgICB9KTtcblxuICAgIHJldHVybiBDdXN0b21FbGVtZW50O1xuICB9O1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZ1ZSkge1xuICB3aW5kb3cuVnVlLnVzZShpbnN0YWxsKTtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkKSB7XG4gICAgaW5zdGFsbC5pbnN0YWxsZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5yZXR1cm4gaW5zdGFsbDtcblxufSkpKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTZcbiAqIChjKSAyMDE0LTIwMTggRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLlZ1ZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyB0aGVzZSBoZWxwZXJzIHByb2R1Y2VzIGJldHRlciB2bSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSBlLmcuIFtvYmplY3QgT2JqZWN0XVxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQuLi4gZS5nLlxuICogUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHkgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmUgc2luY2UgbmF0aXZlIGJpbmQgaXNcbiAqIG5vdyBtb3JlIHBlcmZvcm1hbnQgaW4gbW9zdCBicm93c2VycywgYnV0IHJlbW92aW5nIGl0IHdvdWxkIGJlIGJyZWFraW5nIGZvclxuICogY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3JcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7XG4gICAgcmV0dXJuIGtleXMuY29uY2F0KG0uc3RhdGljS2V5cyB8fCBbXSlcbiAgfSwgW10pLmpvaW4oJywnKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSAvW15cXHcuJF0vO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbntcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtIHx8IHt9O1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyB0aGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyB0aGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG9ubHkgb25lXG4vLyB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZCBhdCBhbnkgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKF90YXJnZXQpIHtcbiAgaWYgKERlcC50YXJnZXQpIHsgdGFyZ2V0U3RhY2sucHVzaChEZXAudGFyZ2V0KTsgfVxuICBEZXAudGFyZ2V0ID0gX3RhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrLnBvcCgpO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIHZub2RlLmNoaWxkcmVuLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciBhdWdtZW50ID0gaGFzUHJvdG9cbiAgICAgID8gcHJvdG9BdWdtZW50XG4gICAgICA6IGNvcHlBdWdtZW50O1xuICAgIGF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggZWFjaCBwcm9wZXJ0eSBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYW4gdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIGlmICghZ2V0dGVyICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyb20pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHRvVmFsKSAmJiBpc1BsYWluT2JqZWN0KGZyb21WYWwpKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIS9eW2EtekEtWl1bXFx3LV0qJC8udGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ2NhbiBvbmx5IGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSBoeXBoZW4sICcgK1xuICAgICAgJ2FuZCBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cbi8qIGdsb2JhbHMgTWVzc2FnZUNoYW5uZWwgKi9cblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgYm90aCBtaWNyb3Rhc2tzIGFuZCAobWFjcm8pIHRhc2tzLlxuLy8gSW4gPCAyLjQgd2UgdXNlZCBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGJ1dCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Mgd2hlcmVcbi8vIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwKSBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWVcbi8vIGV2ZW50ICgjNjU2NikuIEhvd2V2ZXIsIHVzaW5nIChtYWNybykgdGFza3MgZXZlcnl3aGVyZSBhbHNvIGhhcyBzdWJ0bGUgcHJvYmxlbXNcbi8vIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludCAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEhlcmUgd2UgdXNlIG1pY3JvdGFzayBieSBkZWZhdWx0LCBidXQgZXhwb3NlIGEgd2F5IHRvIGZvcmNlIChtYWNybykgdGFzayB3aGVuXG4vLyBuZWVkZWQgKGUuZy4gaW4gZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgYnkgdi1vbikuXG52YXIgbWljcm9UaW1lckZ1bmM7XG52YXIgbWFjcm9UaW1lckZ1bmM7XG52YXIgdXNlTWFjcm9UYXNrID0gZmFsc2U7XG5cbi8vIERldGVybWluZSAobWFjcm8pIHRhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vLyBUZWNobmljYWxseSBzZXRJbW1lZGlhdGUgc2hvdWxkIGJlIHRoZSBpZGVhbCBjaG9pY2UsIGJ1dCBpdCdzIG9ubHkgYXZhaWxhYmxlXG4vLyBpbiBJRS4gVGhlIG9ubHkgcG9seWZpbGwgdGhhdCBjb25zaXN0ZW50bHkgcXVldWVzIHRoZSBjYWxsYmFjayBhZnRlciBhbGwgRE9NXG4vLyBldmVudHMgdHJpZ2dlcmVkIGluIHRoZSBzYW1lIGxvb3AgaXMgYnkgdXNpbmcgTWVzc2FnZUNoYW5uZWwuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2UgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNZXNzYWdlQ2hhbm5lbCkgfHxcbiAgLy8gUGhhbnRvbUpTXG4gIE1lc3NhZ2VDaGFubmVsLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE1lc3NhZ2VDaGFubmVsQ29uc3RydWN0b3JdJ1xuKSkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICB2YXIgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2hDYWxsYmFja3M7XG4gIG1hY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHBvcnQucG9zdE1lc3NhZ2UoMSk7XG4gIH07XG59IGVsc2Uge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuLy8gRGV0ZXJtaW5lIG1pY3JvdGFzayBkZWZlciBpbXBsZW1lbnRhdGlvbi5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgbWljcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBpbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBmYWxsYmFjayB0byBtYWNyb1xuICBtaWNyb1RpbWVyRnVuYyA9IG1hY3JvVGltZXJGdW5jO1xufVxuXG4vKipcbiAqIFdyYXAgYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGFueSBjb2RlIGluc2lkZSB0cmlnZ2VycyBzdGF0ZSBjaGFuZ2UsXG4gKiB0aGUgY2hhbmdlcyBhcmUgcXVldWVkIHVzaW5nIGEgKG1hY3JvKSB0YXNrIGluc3RlYWQgb2YgYSBtaWNyb3Rhc2suXG4gKi9cbmZ1bmN0aW9uIHdpdGhNYWNyb1Rhc2sgKGZuKSB7XG4gIHJldHVybiBmbi5fd2l0aFRhc2sgfHwgKGZuLl93aXRoVGFzayA9IGZ1bmN0aW9uICgpIHtcbiAgICB1c2VNYWNyb1Rhc2sgPSB0cnVlO1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuICAgIHJldHVybiByZXNcbiAgfSlcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICBpZiAodXNlTWFjcm9UYXNrKSB7XG4gICAgICBtYWNyb1RpbWVyRnVuYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWNyb1RpbWVyRnVuYygpO1xuICAgIH1cbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG57XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG57XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1cik7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5vbmNlLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihyZXMuY29tcG9uZW50KSAmJiB0eXBlb2YgcmVzLmNvbXBvbmVudC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbiwgb25jZSkge1xuICBpZiAob25jZSkge1xuICAgIHRhcmdldC4kb25jZShldmVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcyQxLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9mZihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmIChmbikge1xuICAgICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgICAgdmFyIGNiO1xuICAgICAgdmFyIGkkMSA9IGNicy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaSQxLS0pIHtcbiAgICAgICAgY2IgPSBjYnNbaSQxXTtcbiAgICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgICBjYnMuc3BsaWNlKGkkMSwgMSk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlblxuICB2YXIgaGFzQ2hpbGRyZW4gPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgLy8gaGFzIG5ldyBzY29wZWQgc2xvdHNcbiAgICB2bS4kc2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0IC8vIGhhcyBvbGQgc2NvcGVkIHNsb3RzXG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChoYXNDaGlsZHJlbikge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBoYW5kbGVyc1tpXS5jYWxsKHZtKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChob29rICsgXCIgaG9va1wiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB1aWQkMSA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMTsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMkMS5kZXBzW2ldO1xuICAgIGlmICghdGhpcyQxLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdGhpcyQxLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzJDEuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyQxKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gcHJveHkgZGF0YSBvbiBpbnN0YW5jZVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgdmFyIG1ldGhvZHMgPSB2bS4kb3B0aW9ucy5tZXRob2RzO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiVGhlIGRhdGEgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBcIiArXG4gICAgICAgIFwiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgfVxuICB9XG4gIC8vIG9ic2VydmUgZGF0YVxuICBvYnNlcnZlKGRhdGEsIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBkYXRhIGdldHRlcnNcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgIHJldHVybiB7fVxuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIHZhciBpc1NTUiA9IGlzU2VydmVyUmVuZGVyaW5nKCk7XG5cbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDtcbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IHVzZXJEZWY7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IHVzZXJEZWYuZ2V0XG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0XG4gICAgICA/IHVzZXJEZWYuc2V0XG4gICAgICA6IG5vb3A7XG4gIH1cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICB7XG4gICAgICBpZiAobWV0aG9kc1trZXldID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IG1ldGhvZHNba2V5XSA9PSBudWxsID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgfVxuICB9XG4gIGlmIChpc0RlZihyZXQpKSB7XG4gICAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90Tm9kZXMuX3JlbmRlcmVkKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJEdXBsaWNhdGUgcHJlc2VuY2Ugb2Ygc2xvdCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGZvdW5kIGluIHRoZSBzYW1lIHJlbmRlciB0cmVlIFwiICtcbiAgICAgICAgICBcIi0gdGhpcyB3aWxsIGxpa2VseSBjYXVzZSByZW5kZXIgZXJyb3JzLlwiLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNsb3ROb2Rlcy5fcmVuZGVyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBub2RlcyA9IHNsb3ROb2RlcyB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoa2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IsIGNvbnRleHQpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICAvLyBXZWV4IHNwZWNpZmljOiBpbnZva2UgcmVjeWNsZS1saXN0IG9wdGltaXplZCBAcmVuZGVyIGZ1bmN0aW9uIGZvclxuICAvLyBleHRyYWN0aW5nIGNlbGwtc2xvdCB0ZW1wbGF0ZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0hhbmtzMTAxMDAvd2VleC1uYXRpdmUtZGlyZWN0aXZlL3RyZWUvbWFzdGVyL2NvbXBvbmVudFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCwgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudEVsbSxcbiAgcmVmRWxtXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgX3BhcmVudEVsbTogcGFyZW50RWxtIHx8IG51bGwsXG4gICAgX3JlZkVsbTogcmVmRWxtIHx8IG51bGxcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIGhvb2tzW2tleV0gPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gIH1cbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0JzsoZGF0YS5wcm9wcyB8fCAoZGF0YS5wcm9wcyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICBpZiAoaXNEZWYob25bZXZlbnRdKSkge1xuICAgIG9uW2V2ZW50XSA9IFtkYXRhLm1vZGVsLmNhbGxiYWNrXS5jb25jYXQob25bZXZlbnRdKTtcbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICAvLyByZXNldCBfcmVuZGVyZWQgZmxhZyBvbiBzbG90cyBmb3IgZHVwbGljYXRlIHNsb3QgY2hlY2tcbiAgICB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdm0uJHNsb3RzKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICB2bS4kc2xvdHNba2V5XS5fcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyB8fCBlbXB0eU9iamVjdDtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn1cblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmVcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjUuMTYnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxuXG52YXIgbm9kZU9wcyA9IE9iamVjdC5mcmVlemUoe1xuXHRjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG5cdGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuXHRjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG5cdGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG5cdGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuXHRyZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG5cdGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcblx0cGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcblx0bmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuXHR0YWdOYW1lOiB0YWdOYW1lLFxuXHRzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cdHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLywgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKHJlZiQkMS5wYXJlbnROb2RlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59XG5cbi8qICAqL1xuXG52YXIgdmFsaWREaXZpc2lvbkNoYXJSRSA9IC9bXFx3KS4rXFwtXyRcXF1dLztcblxuZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgdmFyIGluU2luZ2xlID0gZmFsc2U7XG4gIHZhciBpbkRvdWJsZSA9IGZhbHNlO1xuICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICB2YXIgaW5SZWdleCA9IGZhbHNlO1xuICB2YXIgY3VybHkgPSAwO1xuICB2YXIgc3F1YXJlID0gMDtcbiAgdmFyIHBhcmVuID0gMDtcbiAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7XG4gIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBleHAubGVuZ3RoOyBpKyspIHtcbiAgICBwcmV2ID0gYztcbiAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGluU2luZ2xlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVDKSB7IGluU2luZ2xlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSB7IGluRG91YmxlID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcbiAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblJlZ2V4KSB7XG4gICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVDKSB7IGluUmVnZXggPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcbiAgICAgICAgZm9yICg7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICBwdXNoRmlsdGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRmlsdGVyICgpIHtcbiAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25cbn1cblxuZnVuY3Rpb24gd3JhcEZpbHRlciAoZXhwLCBmaWx0ZXIpIHtcbiAgdmFyIGkgPSBmaWx0ZXIuaW5kZXhPZignKCcpO1xuICBpZiAoaSA8IDApIHtcbiAgICAvLyBfZjogcmVzb2x2ZUZpbHRlclxuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBmaWx0ZXIgKyBcIlxcXCIpKFwiICsgZXhwICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7XG4gICAgdmFyIGFyZ3MgPSBmaWx0ZXIuc2xpY2UoaSArIDEpO1xuICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJhc2VXYXJuIChtc2cpIHtcbiAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbn1cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaCh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIChlbC5hdHRycyB8fCAoZWwuYXR0cnMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuZnVuY3Rpb24gYWRkUmF3QXR0ciAoZWwsIG5hbWUsIHZhbHVlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2goeyBuYW1lOiBuYW1lLCByYXdOYW1lOiByYXdOYW1lLCB2YWx1ZTogdmFsdWUsIGFyZzogYXJnLCBtb2RpZmllcnM6IG1vZGlmaWVycyB9KTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnQsXG4gIHdhcm5cbikge1xuICBtb2RpZmllcnMgPSBtb2RpZmllcnMgfHwgZW1wdHlPYmplY3Q7XG4gIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4gJiZcbiAgICBtb2RpZmllcnMucHJldmVudCAmJiBtb2RpZmllcnMucGFzc2l2ZVxuICApIHtcbiAgICB3YXJuKFxuICAgICAgJ3Bhc3NpdmUgYW5kIHByZXZlbnQgY2FuXFwndCBiZSB1c2VkIHRvZ2V0aGVyLiAnICtcbiAgICAgICdQYXNzaXZlIGhhbmRsZXIgY2FuXFwndCBwcmV2ZW50IGRlZmF1bHQgZXZlbnQuJ1xuICAgICk7XG4gIH1cblxuICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG4gIGlmIChtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMuY2FwdHVyZTtcbiAgICBuYW1lID0gJyEnICsgbmFtZTsgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9ICd+JyArIG5hbWU7IC8vIG1hcmsgdGhlIGV2ZW50IGFzIG9uY2VcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5wYXNzaXZlO1xuICAgIG5hbWUgPSAnJicgKyBuYW1lOyAvLyBtYXJrIHRoZSBldmVudCBhcyBwYXNzaXZlXG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgaWYgKG1vZGlmaWVycy5yaWdodCkge1xuICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnJpZ2h0O1xuICAgIH0gZWxzZSBpZiAobW9kaWZpZXJzLm1pZGRsZSkge1xuICAgICAgbmFtZSA9ICdtb3VzZXVwJztcbiAgICB9XG4gIH1cblxuICB2YXIgZXZlbnRzO1xuICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMubmF0aXZlO1xuICAgIGV2ZW50cyA9IGVsLm5hdGl2ZUV2ZW50cyB8fCAoZWwubmF0aXZlRXZlbnRzID0ge30pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50cyA9IGVsLmV2ZW50cyB8fCAoZWwuZXZlbnRzID0ge30pO1xuICB9XG5cbiAgdmFyIG5ld0hhbmRsZXIgPSB7XG4gICAgdmFsdWU6IHZhbHVlLnRyaW0oKVxuICB9O1xuICBpZiAobW9kaWZpZXJzICE9PSBlbXB0eU9iamVjdCkge1xuICAgIG5ld0hhbmRsZXIubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuICB9XG5cbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG5cbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgZ2V0U3RhdGljXG4pIHtcbiAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJzonICsgbmFtZSkgfHxcbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1iaW5kOicgKyBuYW1lKTtcbiAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmlsdGVycyhkeW5hbWljVmFsdWUpXG4gIH0gZWxzZSBpZiAoZ2V0U3RhdGljICE9PSBmYWxzZSkge1xuICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgIGlmIChzdGF0aWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhdGljVmFsdWUpXG4gICAgfVxuICB9XG59XG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmVtb3ZlRnJvbU1hcFxuKSB7XG4gIHZhciB2YWw7XG4gIGlmICgodmFsID0gZWwuYXR0cnNNYXBbbmFtZV0pICE9IG51bGwpIHtcbiAgICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVtb3ZlRnJvbU1hcCkge1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFtuYW1lXTtcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLFxuICAgIGNhbGxiYWNrOiAoXCJmdW5jdGlvbiAoXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpIHtcIiArIGFzc2lnbm1lbnQgKyBcIn1cIilcbiAgfTtcbn1cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2VuQXNzaWdubWVudENvZGUgKFxuICB2YWx1ZSxcbiAgYXNzaWdubWVudFxuKSB7XG4gIHZhciByZXMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKHZhbHVlICsgXCI9XCIgKyBhc3NpZ25tZW50KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYSB2LW1vZGVsIGV4cHJlc3Npb24gaW50byBhIGJhc2UgcGF0aCBhbmQgYSBmaW5hbCBrZXkgc2VnbWVudC5cbiAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIFBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2tleV1cbiAqIC0gdGVzdFt0ZXN0MVtrZXldXVxuICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtrZXldXVxuICpcbiAqL1xuXG52YXIgbGVuO1xudmFyIHN0cjtcbnZhciBjaHI7XG52YXIgaW5kZXgkMTtcbnZhciBleHByZXNzaW9uUG9zO1xudmFyIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4kMTtcblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIHtcbiAgICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3NcbiAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIiArXG4gICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgd2FybiQxKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJ1xuICAgICk7XG4gIH1cblxuICAvLyBlbnN1cmUgcnVudGltZSBkaXJlY3RpdmUgbWV0YWRhdGFcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZ2VuQ2hlY2tib3hNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gIHZhciBmYWxzZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnZmFsc2UtdmFsdWUnKSB8fCAnZmFsc2UnO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsXG4gICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgXCI/X2koXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpPi0xXCIgKyAoXG4gICAgICB0cnVlVmFsdWVCaW5kaW5nID09PSAndHJ1ZSdcbiAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgOiAoXCI6X3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKVwiKVxuICAgIClcbiAgKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsXG4gICAgXCJ2YXIgJCRhPVwiICsgdmFsdWUgKyBcIixcIiArXG4gICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG4gICAgICAgIFwiJCRjPSQkZWwuY2hlY2tlZD8oXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpOihcIiArIGZhbHNlVmFsdWVCaW5kaW5nICsgXCIpO1wiICtcbiAgICAnaWYoQXJyYXkuaXNBcnJheSgkJGEpKXsnICtcbiAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG4gICAgICAgICAgJyQkaT1faSgkJGEsJCR2KTsnICtcbiAgICAgIFwiaWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLmNvbmNhdChbJCR2XSknKSkgKyBcIil9XCIgK1xuICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKSkgKyBcIil9XCIgK1xuICAgIFwifWVsc2V7XCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGMnKSkgKyBcIn1cIixcbiAgICBudWxsLCB0cnVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICBhZGRQcm9wKGVsLCAnY2hlY2tlZCcsIChcIl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVCaW5kaW5nKSwgbnVsbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdlblNlbGVjdCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICB2YXIgc2VsZWN0ZWRWYWwgPSBcIkFycmF5LnByb3RvdHlwZS5maWx0ZXJcIiArXG4gICAgXCIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KVwiICtcbiAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArIFwifSlcIjtcblxuICB2YXIgYXNzaWdubWVudCA9ICckZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0nO1xuICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gIGNvZGUgPSBjb2RlICsgXCIgXCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpKTtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGNvZGUsIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAvLyB3YXJuIGlmIHYtYmluZDp2YWx1ZSBjb25mbGljdHMgd2l0aCB2LW1vZGVsXG4gIC8vIGV4Y2VwdCBmb3IgaW5wdXRzIHdpdGggdi1iaW5kOnR5cGVcbiAge1xuICAgIHZhciB2YWx1ZSQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddIHx8IGVsLmF0dHJzTWFwWyc6dmFsdWUnXTtcbiAgICB2YXIgdHlwZUJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnR5cGUnXSB8fCBlbC5hdHRyc01hcFsnOnR5cGUnXTtcbiAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp2YWx1ZSddID8gJ3YtYmluZDp2YWx1ZScgOiAnOnZhbHVlJztcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgJ2JlY2F1c2UgdGhlIGxhdHRlciBhbHJlYWR5IGV4cGFuZHMgdG8gYSB2YWx1ZSBiaW5kaW5nIGludGVybmFsbHknXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBsYXp5ID0gcmVmLmxhenk7XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICB2YXIgZXZlbnQgPSBsYXp5XG4gICAgPyAnY2hhbmdlJ1xuICAgIDogdHlwZSA9PT0gJ3JhbmdlJ1xuICAgICAgPyBSQU5HRV9UT0tFTlxuICAgICAgOiAnaW5wdXQnO1xuXG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSAnJGV2ZW50LnRhcmdldC52YWx1ZSc7XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCIkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cblxuICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAobmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICB9XG5cbiAgYWRkUHJvcChlbCwgJ3ZhbHVlJywgKFwiKFwiICsgdmFsdWUgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG4gIGlmICh0cmltIHx8IG51bWJlcikge1xuICAgIGFkZEhhbmRsZXIoZWwsICdibHVyJywgJyRmb3JjZVVwZGF0ZSgpJyk7XG4gIH1cbn1cblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChoYW5kbGVyLCBldmVudCwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkJDEgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgb25jZSQkMSxcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIGhhbmRsZXIgPSB3aXRoTWFjcm9UYXNrKGhhbmRsZXIpO1xuICBpZiAob25jZSQkMSkgeyBoYW5kbGVyID0gY3JlYXRlT25jZUhhbmRsZXIoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpOyB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgZXZlbnQsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIGV2ZW50LFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgZXZlbnQsXG4gICAgaGFuZGxlci5fd2l0aFRhc2sgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKGlzVW5kZWYocHJvcHNba2V5XSkpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubGF6eSkge1xuICAgICAgLy8gaW5wdXRzIHdpdGggbGF6eSBzaG91bGQgb25seSBiZSB1cGRhdGVkIHdoZW4gbm90IGluIGZvY3VzXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufVxuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn1cblxuLyogICovXG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZikge1xuICBpZiAoIWRlZikge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZi5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSBzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fVxuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dXG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn1cblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgYSBzaW5nbGUgZWxlbWVudC9jb21wb25lbnQuXG4vLyBzdXBwb3J0cyB0cmFuc2l0aW9uIG1vZGUgKG91dC1pbiAvIGluLW91dClcblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH0pO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9KSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGxpc3QgaXRlbXMuXG4vLyBzdXBwb3J0cyBtb3ZlIHRyYW5zaXRpb25zIHVzaW5nIHRoZSBGTElQIHRlY2huaXF1ZS5cblxuLy8gQmVjYXVzZSB0aGUgdmRvbSdzIGNoaWxkcmVuIHVwZGF0ZSBhbGdvcml0aG0gaXMgXCJ1bnN0YWJsZVwiIC0gaS5lLlxuLy8gaXQgZG9lc24ndCBndWFyYW50ZWUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uaW5nIG9mIHJlbW92ZWQgZWxlbWVudHMsXG4vLyB3ZSBmb3JjZSB0cmFuc2l0aW9uLWdyb3VwIHRvIHVwZGF0ZSBpdHMgY2hpbGRyZW4gaW50byB0d28gcGFzc2VzOlxuLy8gaW4gdGhlIGZpcnN0IHBhc3MsIHdlIHJlbW92ZSBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvIGJlIHJlbW92ZWQsXG4vLyB0cmlnZ2VyaW5nIHRoZWlyIGxlYXZpbmcgdHJhbnNpdGlvbjsgaW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBpbnNlcnQvbW92ZVxuLy8gaW50byB0aGUgZmluYWwgZGVzaXJlZCBzdGF0ZS4gVGhpcyB3YXkgaW4gdGhlIHNlY29uZCBwYXNzIHJlbW92ZWRcbi8vIG5vZGVzIHdpbGwgcmVtYWluIHdoZXJlIHRoZXkgc2hvdWxkIGJlLlxuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBcImRldmVsb3BtZW50XCIgIT09ICd0ZXN0JyAmJlxuICAgICAgICBpc0Nocm9tZVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG52YXIgZGVmYXVsdFRhZ1JFID0gL1xce1xceygoPzoufFxcbikrPylcXH1cXH0vZztcbnZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cblxuXG5mdW5jdGlvbiBwYXJzZVRleHQgKFxuICB0ZXh0LFxuICBkZWxpbWl0ZXJzXG4pIHtcbiAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gIGlmICghdGFnUkUudGVzdCh0ZXh0KSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHJhd1Rva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleCwgdG9rZW5WYWx1ZTtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgpKTtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBleHByZXNzaW9uOiB0b2tlbnMuam9pbignKycpLFxuICAgIHRva2VuczogcmF3VG9rZW5zXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0YXRpY0NsYXNzKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LidcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGtsYXNzJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljQ2xhc3MnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSxcbiAgZ2VuRGF0YTogZ2VuRGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxIChlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJzdHlsZT1cXFwiXCIgKyBzdGF0aWNTdHlsZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgc3R5bGU9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpzdHlsZT1cInZhbFwiPi4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnN0YXRpY1N0eWxlID0gSlNPTi5zdHJpbmdpZnkocGFyc2VTdHlsZVRleHQoc3RhdGljU3R5bGUpKTtcbiAgfVxuXG4gIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIHZhciBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gXCJzdGF0aWNTdHlsZTpcIiArIChlbC5zdGF0aWNTdHlsZSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwuc3R5bGVCaW5kaW5nKSB7XG4gICAgZGF0YSArPSBcInN0eWxlOihcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIpLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBzdHlsZSQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sXG4gIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUkMSxcbiAgZ2VuRGF0YTogZ2VuRGF0YSQxXG59XG5cbi8qICAqL1xuXG52YXIgZGVjb2RlcjtcblxudmFyIGhlID0ge1xuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZSAoaHRtbCkge1xuICAgIGRlY29kZXIgPSBkZWNvZGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudFxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG4gICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICtcbiAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG4vLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG52YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vKiFcbiAqIEhUTUwgUGFyc2VyIEJ5IEpvaG4gUmVzaWcgKGVqb2huLm9yZylcbiAqIE1vZGlmaWVkIGJ5IEp1cml5IFwia2FuZ2F4XCIgWmF5dHNldlxuICogT3JpZ2luYWwgY29kZSBieSBFcmlrIEFydmlkc3NvbiwgTW96aWxsYSBQdWJsaWMgTGljZW5zZVxuICogaHR0cDovL2VyaWsuZWFlLm5ldC9zaW1wbGVodG1scGFyc2VyL3NpbXBsZWh0bWxwYXJzZXIuanNcbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/Lztcbi8vIGNvdWxkIHVzZSBodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9SRUMteG1sLW5hbWVzLTE5OTkwMTE0LyNOVC1RTmFtZVxuLy8gYnV0IGZvciBWdWUgdGVtcGxhdGVzIHdlIGNhbiBlbmZvcmNlIGEgc2ltcGxlIGNoYXJzZXRcbnZhciBuY25hbWUgPSAnW2EtekEtWl9dW1xcXFx3XFxcXC1cXFxcLl0qJztcbnZhciBxbmFtZUNhcHR1cmUgPSBcIigoPzpcIiArIG5jbmFtZSArIFwiXFxcXDopP1wiICsgbmNuYW1lICsgXCIpXCI7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoKFwiXjxcXFxcL1wiICsgcW5hbWVDYXB0dXJlICsgXCJbXj5dKj5cIikpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbi8vICM3Mjk4OiBlc2NhcGUgLSB0byBhdm9pZCBiZWluZyBwYXNlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbnZhciBjb21tZW50ID0gL148IVxcLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG52YXIgSVNfUkVHRVhfQ0FQVFVSSU5HX0JST0tFTiA9IGZhbHNlO1xuJ3gnLnJlcGxhY2UoL3goLik/L2csIGZ1bmN0aW9uIChtLCBnKSB7XG4gIElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gPSBnID09PSAnJztcbn0pO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0J1xufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXApOy9nO1xudmFyIGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMTB8IzkpOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWckJDEgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKGxhc3RUYWcsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgICBhZHZhbmNlKHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICAgIGh0bWwgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY2hhcnMgJiYgdGV4dCkge1xuICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgIXN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLndhcm4pIHtcbiAgICAgICAgb3B0aW9ucy53YXJuKChcIk1hbC1mb3JtYXR0ZWQgdGFnIGF0IGVuZCBvZiB0ZW1wbGF0ZTogXFxcIlwiICsgaHRtbCArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICBpbmRleCArPSBuO1xuICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgIHZhciBzdGFydCA9IGh0bWwubWF0Y2goc3RhcnRUYWdPcGVuKTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guYXR0cnMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgbWF0Y2gudW5hcnlTbGFzaCA9IGVuZFsxXTtcbiAgICAgICAgYWR2YW5jZShlbmRbMF0ubGVuZ3RoKTtcbiAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuICAgIHZhciB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICB2YXIgdW5hcnlTbGFzaCA9IG1hdGNoLnVuYXJ5U2xhc2g7XG5cbiAgICBpZiAoZXhwZWN0SFRNTCkge1xuICAgICAgaWYgKGxhc3RUYWcgPT09ICdwJyAmJiBpc05vblBocmFzaW5nVGFnKHRhZ05hbWUpKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKGxhc3RUYWcpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbkJlTGVmdE9wZW5UYWckJDEodGFnTmFtZSkgJiYgbGFzdFRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICBwYXJzZUVuZFRhZyh0YWdOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5hcnkgPSBpc1VuYXJ5VGFnJCQxKHRhZ05hbWUpIHx8ICEhdW5hcnlTbGFzaDtcblxuICAgIHZhciBsID0gbWF0Y2guYXR0cnMubGVuZ3RoO1xuICAgIHZhciBhdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFyZ3MgPSBtYXRjaC5hdHRyc1tpXTtcbiAgICAgIC8vIGhhY2tpc2ggd29yayBhcm91bmQgRkYgYnVnIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM2OTc3OFxuICAgICAgaWYgKElTX1JFR0VYX0NBUFRVUklOR19CUk9LRU4gJiYgYXJnc1swXS5pbmRleE9mKCdcIlwiJykgPT09IC0xKSB7XG4gICAgICAgIGlmIChhcmdzWzNdID09PSAnJykgeyBkZWxldGUgYXJnc1szXTsgfVxuICAgICAgICBpZiAoYXJnc1s0XSA9PT0gJycpIHsgZGVsZXRlIGFyZ3NbNF07IH1cbiAgICAgICAgaWYgKGFyZ3NbNV0gPT09ICcnKSB7IGRlbGV0ZSBhcmdzWzVdOyB9XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmdzWzNdIHx8IGFyZ3NbNF0gfHwgYXJnc1s1XSB8fCAnJztcbiAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICA6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXM7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgdmFsdWU6IGRlY29kZUF0dHIodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycyB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgbG93ZXJDYXNlZFRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIChpID4gcG9zIHx8ICF0YWdOYW1lKSAmJlxuICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgb3BlbiBlbGVtZW50cyBmcm9tIHRoZSBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgbGFzdFRhZyA9IHBvcyAmJiBzdGFja1twb3MgLSAxXS50YWc7XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ2JyJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCBmYWxzZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgb3B0aW9ucy5lbmQodGFnTmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgb25SRSA9IC9eQHxedi1vbjovO1xudmFyIGRpclJFID0gL152LXxeQHxeOi87XG52YXIgZm9yQWxpYXNSRSA9IC8oW15dKj8pXFxzKyg/OmlufG9mKVxccysoW15dKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcblxudmFyIGFyZ1JFID0gLzooLiopJC87XG52YXIgYmluZFJFID0gL146fF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cbnZhciBkZWNvZGVIVE1MQ2FjaGVkID0gY2FjaGVkKGhlLmRlY29kZSk7XG5cbi8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxudmFyIHdhcm4kMjtcbnZhciBkZWxpbWl0ZXJzO1xudmFyIHRyYW5zZm9ybXM7XG52YXIgcHJlVHJhbnNmb3JtcztcbnZhciBwb3N0VHJhbnNmb3JtcztcbnZhciBwbGF0Zm9ybUlzUHJlVGFnO1xudmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7XG52YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG5cblxuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgY2hpbGRyZW46IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87XG4gIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciByb290O1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmFyIGluVlByZSA9IGZhbHNlO1xuICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2cpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm4kMihtc2cpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9zdFRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQyLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSBjcmVhdGVBU1RFbGVtZW50KHRhZywgYXR0cnMsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgaWYgKG5zKSB7XG4gICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgICAvLyBlbGVtZW50LXNjb3BlIHN0dWZmXG4gICAgICAgIHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGVja1Jvb3RDb25zdHJhaW50cyAoZWwpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgfSBlbHNlIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgICBibG9jazogZWxlbWVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgICAgXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG4gICAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnNsb3RTY29wZSkgeyAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQucGxhaW4gPSBmYWxzZTtcbiAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbiBlbmQgKCkge1xuICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICB2YXIgbGFzdE5vZGUgPSBlbGVtZW50LmNoaWxkcmVuW2VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdE5vZGUgJiYgbGFzdE5vZGUudHlwZSA9PT0gMyAmJiBsYXN0Tm9kZS50ZXh0ID09PSAnICcgJiYgIWluUHJlKSB7XG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgICAvLyBwb3Agc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgdGV4dCA9IGluUHJlIHx8IHRleHQudHJpbSgpXG4gICAgICAgID8gaXNUZXh0VGFnKGN1cnJlbnRQYXJlbnQpID8gdGV4dCA6IGRlY29kZUhUTUxDYWNoZWQodGV4dClcbiAgICAgICAgLy8gb25seSBwcmVzZXJ2ZSB3aGl0ZXNwYWNlIGlmIGl0cyBub3QgcmlnaHQgYWZ0ZXIgYSBzdGFydGluZyB0YWdcbiAgICAgICAgOiBwcmVzZXJ2ZVdoaXRlc3BhY2UgJiYgY2hpbGRyZW4ubGVuZ3RoID8gJyAnIDogJyc7XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgIHR5cGU6IDMsXG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGwgPSBlbC5hdHRyc0xpc3QubGVuZ3RoO1xuICBpZiAobCkge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgbmFtZTogZWwuYXR0cnNMaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShlbC5hdHRyc0xpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoZWxlbWVudCwgb3B0aW9ucykge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gIWVsZW1lbnQua2V5ICYmICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGg7XG5cbiAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3QoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm4kMihcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlRm9yKGV4cCk7XG4gICAgaWYgKHJlcykge1xuICAgICAgZXh0ZW5kKGVsLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKTtcbiAgICByZXMuaXRlcmF0b3IxID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIHJlcy5pdGVyYXRvcjIgPSBpdGVyYXRvck1hdGNoWzJdLnRyaW0oKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXM7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWYgKGVsKSB7XG4gIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICBpZiAoZXhwKSB7XG4gICAgZWwuaWYgPSBleHA7XG4gICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgIGV4cDogZXhwLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnKSAhPSBudWxsKSB7XG4gICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGVsc2VpZiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnKTtcbiAgICBpZiAoZWxzZWlmKSB7XG4gICAgICBlbC5lbHNlaWYgPSBlbHNlaWY7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHtcbiAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgaWYgKHByZXYgJiYgcHJldi5pZikge1xuICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcbiAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQyKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICB2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5baV1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTbG90IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzbG90U2NvcGU7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwidGhlIFxcXCJzY29wZVxcXCIgYXR0cmlidXRlIGZvciBzY29wZWQgc2xvdHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQgYW5kIFwiICtcbiAgICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgICAgXCJjYW4gYWxzbyBiZSB1c2VkIG9uIHBsYWluIGVsZW1lbnRzIGluIGFkZGl0aW9uIHRvIDx0ZW1wbGF0ZT4gdG8gXCIgK1xuICAgICAgICAgIFwiZGVub3RlIHNjb3BlZCBzbG90cy5cIixcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGUgfHwgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKTtcbiAgICB9IGVsc2UgaWYgKChzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpKSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwiQW1iaWd1b3VzIGNvbWJpbmVkIHVzYWdlIG9mIHNsb3Qtc2NvcGUgYW5kIHYtZm9yIG9uIDxcIiArIChlbC50YWcpICsgXCI+IFwiICtcbiAgICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgICAgXCJzY29wZWQgc2xvdCB0byBtYWtlIGl0IGNsZWFyZXIuXCIsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICAgIH1cbiAgICB2YXIgc2xvdFRhcmdldCA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc2xvdCcpO1xuICAgIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgICAvLyBwcmVzZXJ2ZSBzbG90IGFzIGFuIGF0dHJpYnV0ZSBmb3IgbmF0aXZlIHNoYWRvdyBET00gY29tcGF0XG4gICAgICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzLlxuICAgICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgIGFkZEF0dHIoZWwsICdzbG90Jywgc2xvdFRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGlzUHJvcDtcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lKTtcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNQcm9wID0gZmFsc2U7XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3ApIHtcbiAgICAgICAgICAgIGlzUHJvcCA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvcCB8fCAoXG4gICAgICAgICAgIWVsLmNvbXBvbmVudCAmJiBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSlcbiAgICAgICAgKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIHZhciBhcmcgPSBhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyk7XG4gICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIHtcbiAgICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dCh2YWx1ZSwgZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6aWQ9XCJ2YWxcIj4uJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAvLyAjNjg4NyBmaXJlZm94IGRvZXNuJ3QgdXBkYXRlIG11dGVkIHN0YXRlIGlmIHNldCB2aWEgYXR0cmlidXRlXG4gICAgICAvLyBldmVuIGltbWVkaWF0ZWx5IGFmdGVyIGVsZW1lbnQgY3JlYXRpb25cbiAgICAgIGlmICghZWwuY29tcG9uZW50ICYmXG4gICAgICAgICAgbmFtZSA9PT0gJ211dGVkJyAmJlxuICAgICAgICAgIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKSkge1xuICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCAndHJ1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICB2YXIgbWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKFxuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSAmJiAhaXNFZGdlXG4gICAgKSB7XG4gICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lKTtcbiAgICB9XG4gICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG4vLyBmb3Igc2NyaXB0IChlLmcuIHR5cGU9XCJ4L3RlbXBsYXRlXCIpIG9yIHN0eWxlLCBkbyBub3QgZGVjb2RlIGNvbnRlbnRcbmZ1bmN0aW9uIGlzVGV4dFRhZyAoZWwpIHtcbiAgcmV0dXJuIGVsLnRhZyA9PT0gJ3NjcmlwdCcgfHwgZWwudGFnID09PSAnc3R5bGUnXG59XG5cbmZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuICByZXR1cm4gKFxuICAgIGVsLnRhZyA9PT0gJ3N0eWxlJyB8fFxuICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcbiAgICAgICFlbC5hdHRyc01hcC50eXBlIHx8XG4gICAgICBlbC5hdHRyc01hcC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICkpXG4gIClcbn1cblxudmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXFxkKy87XG52YXIgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGF0dHIubmFtZSA9IGF0dHIubmFtZS5yZXBsYWNlKGllTlNQcmVmaXgsICcnKTtcbiAgICAgIHJlcy5wdXNoKGF0dHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yQWxpYXNNb2RlbCAoZWwsIHZhbHVlKSB7XG4gIHZhciBfZWwgPSBlbDtcbiAgd2hpbGUgKF9lbCkge1xuICAgIGlmIChfZWwuZm9yICYmIF9lbC5hbGlhcyA9PT0gdmFsdWUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICAgIFwiWW91IGFyZSBiaW5kaW5nIHYtbW9kZWwgZGlyZWN0bHkgdG8gYSB2LWZvciBpdGVyYXRpb24gYWxpYXMuIFwiICtcbiAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG4gICAgICAgIFwid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gXCIgK1xuICAgICAgICBcIkNvbnNpZGVyIHVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHVzZSB2LW1vZGVsIG9uIGFuIG9iamVjdCBwcm9wZXJ0eSBpbnN0ZWFkLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBfZWwgPSBfZWwucGFyZW50O1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIEV4cGFuZCBpbnB1dFt2LW1vZGVsXSB3aXRoIGR5YW5taWMgdHlwZSBiaW5kaW5ncyBpbnRvIHYtaWYtZWxzZSBjaGFpbnNcbiAqIFR1cm4gdGhpczpcbiAqICAgPGlucHV0IHYtbW9kZWw9XCJkYXRhW3R5cGVdXCIgOnR5cGU9XCJ0eXBlXCI+XG4gKiBpbnRvIHRoaXM6XG4gKiAgIDxpbnB1dCB2LWlmPVwidHlwZSA9PT0gJ2NoZWNrYm94J1wiIHR5cGU9XCJjaGVja2JveFwiIHYtbW9kZWw9XCJkYXRhW3R5cGVdXCI+XG4gKiAgIDxpbnB1dCB2LWVsc2UtaWY9XCJ0eXBlID09PSAncmFkaW8nXCIgdHlwZT1cInJhZGlvXCIgdi1tb2RlbD1cImRhdGFbdHlwZV1cIj5cbiAqICAgPGlucHV0IHYtZWxzZSA6dHlwZT1cInR5cGVcIiB2LW1vZGVsPVwiZGF0YVt0eXBlXVwiPlxuICovXG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICB2YXIgbWFwID0gZWwuYXR0cnNNYXA7XG4gICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpO1xuICAgIH1cbiAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IFwiKFwiICsgKG1hcFsndi1iaW5kJ10pICsgXCIpLnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBpZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJywgdHJ1ZSk7XG4gICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgdmFyIGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAvLyBwcm9jZXNzIGZvciBvbiB0aGUgbWFpbiBub2RlXG4gICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMCwgb3B0aW9ucyk7XG4gICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgIH0pO1xuICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICB9KTtcbiAgICAgIC8vIDMuIG90aGVyXG4gICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMiA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufVxuXG52YXIgbW9kdWxlcyQxID0gW1xuICBrbGFzcyQxLFxuICBzdHlsZSQxLFxuICBtb2RlbCQyXG5dXG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG4gIGlmIChkaXIudmFsdWUpIHtcbiAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIikpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufVxuXG4vKiAgKi9cblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNQcmVUYWc6IGlzUHJlVGFnLFxuICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGNhbkJlTGVmdE9wZW5UYWcsXG4gIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICBzdGF0aWNLZXlzOiBnZW5TdGF0aWNLZXlzKG1vZHVsZXMkMSlcbn07XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycycgK1xuICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICApXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMkMSAobm9kZSkge1xuICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgIC8vIDIuIHN0YXRpYyBzbG90IGNvbnRlbnQgZmFpbHMgZm9yIGhvdC1yZWxvYWRpbmdcbiAgICBpZiAoXG4gICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgbm9kZS50YWcgIT09ICdzbG90JyAmJlxuICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaztcbiAgICAgICAgbWFya1N0YXRpYyQxKGJsb2NrKTtcbiAgICAgICAgaWYgKCFibG9jay5zdGF0aWMpIHtcbiAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgfVxuICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guXG4gICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzXG4gICAgKSkge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrLCBpc0luRm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICFub2RlLmhhc0JpbmRpbmdzICYmIC8vIG5vIGR5bmFtaWMgYmluZGluZ3NcbiAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGNvbXBvbmVudFxuICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICApKVxufVxuXG5mdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICB3aGlsZSAobm9kZS5wYXJlbnQpIHtcbiAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbnZhciBmbkV4cFJFID0gL14oW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqXFwoLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xudmFyIGtleU5hbWVzID0ge1xuICBlc2M6ICdFc2NhcGUnLFxuICB0YWI6ICdUYWInLFxuICBlbnRlcjogJ0VudGVyJyxcbiAgc3BhY2U6ICcgJyxcbiAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy5cbiAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICBsZWZ0OiBbJ0xlZnQnLCAnQXJyb3dMZWZ0J10sXG4gIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSxcbiAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJ11cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZSxcbiAgd2FyblxuKSB7XG4gIHZhciByZXMgPSBpc05hdGl2ZSA/ICduYXRpdmVPbjp7JyA6ICdvbjp7JztcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICByZXMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgKGdlbkhhbmRsZXIobmFtZSwgZXZlbnRzW25hbWVdKSkgKyBcIixcIjtcbiAgfVxuICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICd9J1xufVxuXG5mdW5jdGlvbiBnZW5IYW5kbGVyIChcbiAgbmFtZSxcbiAgaGFuZGxlclxuKSB7XG4gIGlmICghaGFuZGxlcikge1xuICAgIHJldHVybiAnZnVuY3Rpb24oKXt9J1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICByZXR1cm4gKFwiW1wiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKG5hbWUsIGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgXCJdXCIpXG4gIH1cblxuICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSAoaGFuZGxlci5tb2RpZmllcnMpO1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gZ2VuR3VhcmQoXG4gICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAhbW9kaWZpZXJzW2tleU1vZGlmaWVyXTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAoXCIkZXZlbnQuXCIgKyBrZXlNb2RpZmllciArIFwiS2V5XCIpOyB9KVxuICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIoJGV2ZW50KVwiKVxuICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICA/IChcInJldHVybiAoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcImlmKCEoJ2J1dHRvbicgaW4gJGV2ZW50KSYmXCIgKyAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIilcbn1cblxuZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gIHZhciBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICB9XG4gIHZhciBrZXlDb2RlID0ga2V5Q29kZXNba2V5XTtcbiAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICByZXR1cm4gKFxuICAgIFwiX2soJGV2ZW50LmtleUNvZGUsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5Q29kZSkpICsgXCIsXCIgK1xuICAgIFwiJGV2ZW50LmtleSxcIiArXG4gICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgIFwiKVwiXG4gIClcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG9uIChlbCwgZGlyKSB7XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBkaXIubW9kaWZpZXJzKSB7XG4gICAgd2FybihcInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy5cIik7XG4gIH1cbiAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIFwiLFwiICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIG9uOiBvbixcbiAgYmluZDogYmluZCQxLFxuICBjbG9hazogbm9vcFxufVxuXG4vKiAgKi9cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YSA9IGVsLnBsYWluID8gdW5kZWZpbmVkIDogZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUudHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnRyYW5zZm9ybXNbaV0oZWwsIGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZVxuICB9XG59XG5cbi8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG5mdW5jdGlvbiBnZW5TdGF0aWMgKGVsLCBzdGF0ZSkge1xuICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgcmV0dXJuIChcIl9tKFwiICsgKHN0YXRlLnN0YXRpY1JlbmRlckZucy5sZW5ndGggLSAxKSArIChlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgdmFyIGtleSA9ICcnO1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICB9XG4gICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIixcIiArIChzdGF0ZS5vbmNlSWQrKykgKyBcIixcIiArIGtleSArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbklmIChcbiAgZWwsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEVtcHR5XG4pIHtcbiAgZWwuaWZQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIGdlbklmQ29uZGl0aW9ucyhlbC5pZkNvbmRpdGlvbnMuc2xpY2UoKSwgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpXG59XG5cbmZ1bmN0aW9uIGdlbklmQ29uZGl0aW9ucyAoXG4gIGNvbmRpdGlvbnMsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEVtcHR5XG4pIHtcbiAgaWYgKCFjb25kaXRpb25zLmxlbmd0aCkge1xuICAgIHJldHVybiBhbHRFbXB0eSB8fCAnX2UoKSdcbiAgfVxuXG4gIHZhciBjb25kaXRpb24gPSBjb25kaXRpb25zLnNoaWZ0KCk7XG4gIGlmIChjb25kaXRpb24uZXhwKSB7XG4gICAgcmV0dXJuIChcIihcIiArIChjb25kaXRpb24uZXhwKSArIFwiKT9cIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgXCI6XCIgKyAoZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMsIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkpXG4gIH1cblxuICAvLyB2LWlmIHdpdGggdi1vbmNlIHNob3VsZCBnZW5lcmF0ZSBjb2RlIGxpa2UgKGEpP19tKDApOl9tKDEpXG4gIGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAgKGVsKSB7XG4gICAgcmV0dXJuIGFsdEdlblxuICAgICAgPyBhbHRHZW4oZWwsIHN0YXRlKVxuICAgICAgOiBlbC5vbmNlXG4gICAgICAgID8gZ2VuT25jZShlbCwgc3RhdGUpXG4gICAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRm9yIChcbiAgZWwsXG4gIHN0YXRlLFxuICBhbHRHZW4sXG4gIGFsdEhlbHBlclxuKSB7XG4gIHZhciBleHAgPSBlbC5mb3I7XG4gIHZhciBhbGlhcyA9IGVsLmFsaWFzO1xuICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMSkpIDogJyc7XG4gIHZhciBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJztcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkgJiZcbiAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICFlbC5rZXlcbiAgKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LWZvcj1cXFwiXCIgKyBhbGlhcyArIFwiIGluIFwiICsgZXhwICsgXCJcXFwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggXCIgK1xuICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyBcIigoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczp7XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwifSxcIjtcbiAgfVxuICAvLyBET00gcHJvcHNcbiAgaWYgKGVsLnByb3BzKSB7XG4gICAgZGF0YSArPSBcImRvbVByb3BzOntcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCJ9LFwiO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMsIGZhbHNlLCBzdGF0ZS53YXJuKSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLCB0cnVlLCBzdGF0ZS53YXJuKSkgKyBcIixcIjtcbiAgfVxuICAvLyBzbG90IHRhcmdldFxuICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIC8vIHYtb24gZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgZGF0YSA9IGVsLndyYXBMaXN0ZW5lcnMoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgaWYgKCFkaXJzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgdmFyIGksIGwsIGRpciwgbmVlZFJ1bnRpbWU7XG4gIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgbmVlZFJ1bnRpbWUgPSB0cnVlO1xuICAgIHZhciBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBcIntuYW1lOlxcXCJcIiArIChkaXIubmFtZSkgKyBcIlxcXCIscmF3TmFtZTpcXFwiXCIgKyAoZGlyLnJhd05hbWUpICsgXCJcXFwiXCIgKyAoZGlyLnZhbHVlID8gKFwiLHZhbHVlOihcIiArIChkaXIudmFsdWUpICsgXCIpLGV4cHJlc3Npb246XCIgKyAoSlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKSkpIDogJycpICsgKGRpci5hcmcgPyAoXCIsYXJnOlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAoXG4gICAgZWwuY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGFzdC50eXBlICE9PSAxXG4gICkpIHtcbiAgICBzdGF0ZS53YXJuKCdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nKTtcbiAgfVxuICBpZiAoYXN0LnR5cGUgPT09IDEpIHtcbiAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBzdGF0ZS5vcHRpb25zKTtcbiAgICByZXR1cm4gKFwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiICsgKGlubGluZVJlbmRlckZucy5yZW5kZXIpICsgXCJ9LHN0YXRpY1JlbmRlckZuczpbXCIgKyAoaW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcImZ1bmN0aW9uKCl7XCIgKyBjb2RlICsgXCJ9XCIpOyB9KS5qb2luKCcsJykpICsgXCJdfVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIChPYmplY3Qua2V5cyhzbG90cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBnZW5TY29wZWRTbG90KGtleSwgc2xvdHNba2V5XSwgc3RhdGUpXG4gICAgfSkuam9pbignLCcpKSArIFwiXSlcIilcbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoXG4gIGtleSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvclNjb3BlZFNsb3Qoa2V5LCBlbCwgc3RhdGUpXG4gIH1cbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIChTdHJpbmcoZWwuc2xvdFNjb3BlKSkgKyBcIil7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyBlbC5pZlxuICAgICAgICA/ICgoZWwuaWYpICsgXCI/XCIgKyAoZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJykgKyBcIjp1bmRlZmluZWRcIilcbiAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn1cIjtcbiAgcmV0dXJuIChcIntrZXk6XCIgKyBrZXkgKyBcIixmbjpcIiArIGZuICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkZvclNjb3BlZFNsb3QgKFxuICBrZXksXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBleHAgPSBlbC5mb3I7XG4gIHZhciBhbGlhcyA9IGVsLmFsaWFzO1xuICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMSkpIDogJyc7XG4gIHZhciBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJztcbiAgZWwuZm9yUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBcIl9sKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgXCJmdW5jdGlvbihcIiArIGFsaWFzICsgaXRlcmF0b3IxICsgaXRlcmF0b3IyICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKGdlblNjb3BlZFNsb3Qoa2V5LCBlbCwgc3RhdGUpKSArXG4gICAgJ30pJ1xufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgcmV0dXJuIChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSA/IChcIixcIiArIG5vcm1hbGl6YXRpb25UeXBlKSA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICBjaGlsZHJlbixcbiAgbWF5YmVDb21wb25lbnRcbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSwgc3RhdGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICB9IGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgJiYgKFwie1wiICsgKGVsLmF0dHJzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gKChjYW1lbGl6ZShhLm5hbWUpKSArIFwiOlwiICsgKGEudmFsdWUpKTsgfSkuam9pbignLCcpKSArIFwifVwiKTtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICB7XG4gICAgICByZXMgKz0gXCJcXFwiXCIgKyAocHJvcC5uYW1lKSArIFwiXFxcIjpcIiArICh0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSkpICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuc2xpY2UoMCwgLTEpXG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBrZXl3b3JkcyBzaG91bGQgbm90IGFwcGVhciBpbnNpZGUgZXhwcmVzc2lvbnMsIGJ1dCBvcGVyYXRvcnMgbGlrZVxuLy8gdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxudmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbi8vIHRoZXNlIHVuYXJ5IG9wZXJhdG9ycyBzaG91bGQgbm90IGJlIHVzZWQgYXMgcHJvcGVydHkvbWV0aG9kIG5hbWVzXG52YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RlbGV0ZSx0eXBlb2Ysdm9pZCdcbikuc3BsaXQoJywnKS5qb2luKCdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpfFxcXFxiJykgKyAnXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKScpO1xuXG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG52YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4vLyBkZXRlY3QgcHJvYmxlbWF0aWMgZXhwcmVzc2lvbnMgaW4gYSB0ZW1wbGF0ZVxuZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICBpZiAoYXN0KSB7XG4gICAgY2hlY2tOb2RlKGFzdCwgZXJyb3JzKTtcbiAgfVxuICByZXR1cm4gZXJyb3JzXG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZSAobm9kZSwgZXJyb3JzKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgZXJyb3JzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCBlcnJvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCBlcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIGVycm9ycyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCBlcnJvcnMpIHtcbiAgdmFyIHN0aXBwZWQgPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJyk7XG4gIHZhciBrZXl3b3JkTWF0Y2ggPSBzdGlwcGVkLm1hdGNoKHVuYXJ5T3BlcmF0b3JzUkUpO1xuICBpZiAoa2V5d29yZE1hdGNoICYmIHN0aXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICBlcnJvcnMucHVzaChcbiAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiIGluIGV4cHJlc3Npb24gXCIgKyAodGV4dC50cmltKCkpXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCBlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgZXJyb3JzKSB7XG4gIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIGVycm9ycyk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgZXJyb3JzKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCBlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgZXJyb3JzXG4pIHtcbiAgaWYgKHR5cGVvZiBpZGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKChcInZhciBcIiArIGlkZW50ICsgXCI9X1wiKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3JzLnB1c2goKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIGVycm9ycykge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9ycy5wdXNoKHsgZXJyOiBlcnIsIGNvZGU6IGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9ucyxcbiAgICB2bVxuICApIHtcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICB2YXIgd2FybiQkMSA9IG9wdGlvbnMud2FybiB8fCB3YXJuO1xuICAgIGRlbGV0ZSBvcHRpb25zLndhcm47XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAge1xuICAgICAgaWYgKGNvbXBpbGVkLmVycm9ycyAmJiBjb21waWxlZC5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdHVybiBjb2RlIGludG8gZnVuY3Rpb25zXG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciBmbkdlbkVycm9ycyA9IFtdO1xuICAgIHJlcy5yZW5kZXIgPSBjcmVhdGVGdW5jdGlvbihjb21waWxlZC5yZW5kZXIsIGZuR2VuRXJyb3JzKTtcbiAgICByZXMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uKGNvZGUsIGZuR2VuRXJyb3JzKVxuICAgIH0pO1xuXG4gICAgLy8gY2hlY2sgZnVuY3Rpb24gZ2VuZXJhdGlvbiBlcnJvcnMuXG4gICAgLy8gdGhpcyBzaG91bGQgb25seSBoYXBwZW4gaWYgdGhlcmUgaXMgYSBidWcgaW4gdGhlIGNvbXBpbGVyIGl0c2VsZi5cbiAgICAvLyBtb3N0bHkgZm9yIGNvZGVnZW4gZGV2ZWxvcG1lbnQgdXNlXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAge1xuICAgICAgaWYgKCghY29tcGlsZWQuZXJyb3JzIHx8ICFjb21waWxlZC5lcnJvcnMubGVuZ3RoKSAmJiBmbkdlbkVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgd2FybiQkMShcbiAgICAgICAgICBcIkZhaWxlZCB0byBnZW5lcmF0ZSByZW5kZXIgZnVuY3Rpb246XFxuXFxuXCIgK1xuICAgICAgICAgIGZuR2VuRXJyb3JzLm1hcChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gcmVmLmVycjtcbiAgICAgICAgICAgIHZhciBjb2RlID0gcmVmLmNvZGU7XG5cbiAgICAgICAgICAgIHJldHVybiAoKGVyci50b1N0cmluZygpKSArIFwiIGluXFxuXFxuXCIgKyBjb2RlICsgXCJcXG5cIik7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChjYWNoZVtrZXldID0gcmVzKVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVDb21waWxlciAoYmFzZU9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBjb21waWxlIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9uc1xuICAgICkge1xuICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIHRpcHMgPSBbXTtcbiAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gZnVuY3Rpb24gKG1zZywgdGlwKSB7XG4gICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKG1zZyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAvLyBtZXJnZSBjdXN0b20gbW9kdWxlc1xuICAgICAgICBpZiAob3B0aW9ucy5tb2R1bGVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgKGJhc2VPcHRpb25zLm1vZHVsZXMgfHwgW10pLmNvbmNhdChvcHRpb25zLm1vZHVsZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMuZGlyZWN0aXZlcyA9IGV4dGVuZChcbiAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weSBvdGhlciBvcHRpb25zXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7XG4gICAgICAgICAgICBmaW5hbE9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUsIGZpbmFsT3B0aW9ucyk7XG4gICAgICB7XG4gICAgICAgIGVycm9ycy5wdXNoLmFwcGx5KGVycm9ycywgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCkpO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbnZhciBkaXY7XG5mdW5jdGlvbiBnZXRTaG91bGREZWNvZGUgKGhyZWYpIHtcbiAgZGl2ID0gZGl2IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoJyYjMTA7JykgPiAwXG59XG5cbi8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUoZmFsc2UpIDogZmFsc2U7XG4vLyAjNjgyODogY2hyb21lIGVuY29kZXMgY29udGVudCBpbiBhW2hyZWZdXG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gIHJldHVybiBlbCAmJiBlbC5pbm5lckhUTUxcbn0pO1xuXG52YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSBpZFRvVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyAmJiAhdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAge1xuICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGdldE91dGVySFRNTChlbCk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgbWFyaygnY29tcGlsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVycyxcbiAgICAgICAgY29tbWVudHM6IG9wdGlvbnMuY29tbWVudHNcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUgZW5kJyk7XG4gICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHRoaXMuX25hbWUpICsgXCIgY29tcGlsZVwiKSwgJ2NvbXBpbGUnLCAnY29tcGlsZSBlbmQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vdW50LmNhbGwodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8qKlxuICogR2V0IG91dGVySFRNTCBvZiBlbGVtZW50cywgdGFraW5nIGNhcmVcbiAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwgKGVsKSB7XG4gIGlmIChlbC5vdXRlckhUTUwpIHtcbiAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MXG4gIH1cbn1cblxuVnVlLmNvbXBpbGUgPSBjb21waWxlVG9GdW5jdGlvbnM7XG5cbnJldHVybiBWdWU7XG5cbn0pKSk7XG4iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI3NoYXJlLWJ1dHRvbnMgYVtkYXRhLXYtNWRlNjU1ZjJdIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgY29sb3I6ICM5OTk7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBoZWlnaHQ6IDMwMHB4O1xcbn1cXG4jc2hhcmUtYnV0dG9ucyBhW2RhdGEtdi01ZGU2NTVmMl06aG92ZXIge1xcbiAgY29sb3I6ICMzMzM7XFxuICBib3JkZXItY29sb3I6ICM4ODg7XFxufVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJDOi9Vc2Vycy9NdWdhbm8vVC1WdWUtUHJvai9zcmMvY29tcG9uZW50cy9zcmMvY29tcG9uZW50cy9IZWxsby52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTRCQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLG1CQUFBO0VBQ0EsMEJBQUE7RUFDQSxZQUFBO0VBQ0Esc0JBQUE7RUFDQSxjQUFBO0NBQ0E7QUFDQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtDQUNBXCIsXCJmaWxlXCI6XCJIZWxsby52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcblxcclxcbiAgPGRpdiBpZD1cXFwic2hhcmUtYnV0dG9uc1xcXCI+XFxyXFxuICAgICA8aDE+IEFtIGEgVnVlIENvbXBvbmVudDwvaDE+IFxcclxcbiAgICA8YSBocmVmPVxcXCIjXFxcIiBAY2xpY2sucHJldmVudD1cXFwic2hhcmVcXFwiIHYtaWY9XFxcImZhY2Vib29rXFxcIj5GYWNlYm9vazwvYT5cXHJcXG4gICAgPGEgaHJlZj1cXFwiI1xcXCIgQGNsaWNrLnByZXZlbnQ9XFxcInNoYXJlXFxcIiB2LWlmPVxcXCJ0d2l0dGVyXFxcIj5Ud2l0dGVyPC9hPlxcclxcbiAgICA8YSBocmVmPVxcXCIjXFxcIiBAY2xpY2sucHJldmVudD1cXFwic2hhcmVcXFwiIHYtaWY9XFxcImdwbHVzXFxcIj5Hb29nbGUrPC9hPlxcclxcbiAgXFxyXFxuICA8L2Rpdj5cXHJcXG5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgcHJvcHM6IHtcXHJcXG4gICAgZmFjZWJvb2s6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9LFxcclxcbiAgICB0d2l0dGVyOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfSxcXHJcXG4gICAgZ3BsdXM6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9XFxyXFxuICB9LFxcclxcbiAgbWV0aG9kczoge1xcclxcbiAgICBzaGFyZSAoJGV2ZW50KSB7XFxyXFxuICAgICAgd2luZG93LmFsZXJ0KCdTaGFyZSBvbiAnICsgJGV2ZW50LnRhcmdldC5pbm5lckhUTUwpO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAjc2hhcmUtYnV0dG9ucyBhIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgY29sb3I6ICM5OTk7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgaGVpZ2h0OiAzMDBweDtcXHJcXG4gIH1cXHJcXG4gICNzaGFyZS1idXR0b25zIGE6aG92ZXIge1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG4gICAgYm9yZGVyLWNvbG9yOiAjODg4O1xcclxcbiAgfVxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWRlNjU1ZjJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9IZWxsby52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMWNkOGM5MDRcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01ZGU2NTVmMlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0hlbGxvLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWRlNjU1ZjJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9IZWxsby52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=